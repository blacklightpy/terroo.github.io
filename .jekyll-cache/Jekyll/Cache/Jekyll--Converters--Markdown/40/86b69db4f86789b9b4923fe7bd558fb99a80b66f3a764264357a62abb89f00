I"cW<p><img src="/assets/img/cppdaily/cpp-daily-episode1.jpg" alt="cpp::daily #Episode002 - std::bind e std::placeholders, 10 examples!" /></p>

<p>We often need to implement a function on demand, that is, pass parameters according to the needs of our application. And <code class="highlighter-rouge">std::placeholders</code> are for that.</p>

<p>The <code class="highlighter-rouge">std::placeholders</code> namespace works together with the <code class="highlighter-rouge">std::bind</code> function and we need to include the <code class="highlighter-rouge">&lt;functional&gt;</code> header in order to use it. They contain placeholder objects [<code class="highlighter-rouge">_1, ..._ N</code>] where N is a maximum number defined by the implementation.</p>

<p>The std::bind function template returns a function object based on fn, but with its arguments linked to args.</p>

<p>When used as an argument in a <code class="highlighter-rouge">std::bind</code> expression, placeholder objects are stored in the generated function object and when that function object is called with unbound arguments, each <code class="highlighter-rouge">_N</code> placeholder is replaced with the corresponding umpteenth unbound argument .</p>

<p>Connections characteristics and placeholders</p>

<ul>
  <li>Each placeholder is declared as: <code class="highlighter-rouge">extern / * not specified * / _1; // up to c ++ 17</code>;</li>
  <li>Implementations are encouraged to declare placeholders as: <code class="highlighter-rouge">inline constexpr / * unspecified * / _1</code>;</li>
  <li>Although I declare them by: <code class="highlighter-rouge">extern / * unspecified * / _1</code>; , is still allowed by the standard;</li>
  <li>The types of placeholder objects are DefaultConstructible and CopyConstructible</li>
  <li>Your standard copy/move builders do not throw exceptions;</li>
  <li>For any <code class="highlighter-rouge">_N</code> placeholder, type <code class="highlighter-rouge">std::is_placeholder&lt;decltype (_N)&gt;</code>;</li>
  <li>It is defined and derived from <code class="highlighter-rouge">std::integral_constant&lt;int, N&gt;</code>.</li>
</ul>

<h1 id="examples">EXAMPLES</h1>
<h2 id="01-using-the-basics-with-parameter-_1">01. Using the basics with parameter <code class="highlighter-rouge">_1</code></h2>

<p>Given the function <code class="highlighter-rouge">sum_sub(int, int, int)</code> which returns the sum and subtraction of the parameters, respectively, if we want a parameter to be dynamic:</p>

<ul>
  <li>Third dynamic parameter</li>
</ul>

<figure class="highlight"><pre><code class="language-cpp" data-lang="cpp"><span class="cp">#include &lt;iostream&gt;
#include &lt;functional&gt; // para std::placeholders e std::bind
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="o">::</span><span class="n">placeholders</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">sum_sub</span><span class="p">(</span> <span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">,</span> <span class="kt">int</span> <span class="n">z</span> <span class="p">){</span>
  <span class="k">return</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span> <span class="o">-</span> <span class="n">z</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span> <span class="kt">int</span> <span class="n">argc</span> <span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span> <span class="p">){</span>
  <span class="c1">// replace  z</span>
  <span class="k">auto</span> <span class="n">fn</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">bind</span><span class="p">(</span> <span class="n">sum_sub</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">_1</span> <span class="p">);</span>
  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">fn</span><span class="p">(</span> <span class="mi">2</span> <span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="sc">'\n'</span><span class="p">;</span> <span class="c1">// equal sum_sub( 9, 1, 2 ) = 8</span>
  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">fn</span><span class="p">(</span> <span class="mi">3</span> <span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="sc">'\n'</span><span class="p">;</span> <span class="c1">// equal sum_sub( 9, 1, 3 ) = 7</span>

  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<!-- QUADRADO -->
<script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>

<p><ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-2838251107855362" data-ad-slot="5351066970"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<h2 id="02-second-dynamic-parameter">02. Second dynamic parameter</h2>
<blockquote>
  <p>replace <code class="highlighter-rouge">y</code></p>
</blockquote>

<figure class="highlight"><pre><code class="language-cpp" data-lang="cpp"><span class="k">auto</span> <span class="n">f2</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">bind</span><span class="p">(</span> <span class="n">sum_sub</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="n">_1</span><span class="p">,</span> <span class="mi">1</span> <span class="p">);</span>
<span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">f2</span><span class="p">(</span> <span class="mi">2</span> <span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="sc">'\n'</span><span class="p">;</span> <span class="c1">// equal sum_sub( 9, 2, 1 ) = 10</span>
<span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">f2</span><span class="p">(</span> <span class="mi">3</span> <span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="sc">'\n'</span><span class="p">;</span> <span class="c1">// equal sum_sub( 9, 3, 1 ) = 11</span></code></pre></figure>

<h2 id="03-first-dynamic-parameter">03. First dynamic parameter</h2>
<blockquote>
  <p>replace <code class="highlighter-rouge">x</code></p>
</blockquote>

<figure class="highlight"><pre><code class="language-cpp" data-lang="cpp"><span class="k">auto</span> <span class="n">f3</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">bind</span><span class="p">(</span> <span class="n">sum_sub</span><span class="p">,</span> <span class="n">_1</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">1</span> <span class="p">);</span>
<span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">f3</span><span class="p">(</span> <span class="mi">2</span> <span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="sc">'\n'</span><span class="p">;</span> <span class="c1">// equal sum_sub( 2, 9, 1 ) = 10</span>
<span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">f3</span><span class="p">(</span> <span class="mi">3</span> <span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="sc">'\n'</span><span class="p">;</span> <span class="c1">// equal sum_sub( 3, 9, 2 ) = 11</span></code></pre></figure>

<h2 id="04-substituting-2-parameters">04. Substituting 2 parameters</h2>
<blockquote>
  <p>Replaces <code class="highlighter-rouge">y</code> and <code class="highlighter-rouge">z</code>, respectively <code class="highlighter-rouge">_1</code> and <code class="highlighter-rouge">_2</code>. As we are using parameter <code class="highlighter-rouge">_2</code>, we need to pass 2 parameters, otherwise it generates an error when compiling.</p>
</blockquote>

<figure class="highlight"><pre><code class="language-cpp" data-lang="cpp"><span class="k">auto</span> <span class="n">f4</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">bind</span><span class="p">(</span> <span class="n">sum_sub</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">_1</span><span class="p">,</span> <span class="n">_2</span> <span class="p">);</span>
<span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">f4</span><span class="p">(</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span> <span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="sc">'\n'</span><span class="p">;</span> <span class="c1">// equal sum_sub( 1, 1, 2 ) = 1 + 1 - 2 = 0</span>
<span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">f4</span><span class="p">(</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">10</span> <span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="sc">'\n'</span><span class="p">;</span> <span class="c1">// equal sum_sub( 1, 3, 10 ) = 1 + 3 - 10 = -6</span></code></pre></figure>

<h2 id="05-substituting-2-parameters-with-change-in-order">05. Substituting 2 parameters with change in order</h2>
<blockquote>
  <p>Replaces <code class="highlighter-rouge">z</code> and <code class="highlighter-rouge">y</code>, respectively <code class="highlighter-rouge">_2</code> and <code class="highlighter-rouge">_1</code></p>
</blockquote>

<figure class="highlight"><pre><code class="language-cpp" data-lang="cpp"><span class="k">auto</span> <span class="n">f5</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">bind</span><span class="p">(</span> <span class="n">sum_sub</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">_2</span><span class="p">,</span> <span class="n">_1</span> <span class="p">);</span>
<span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">f5</span><span class="p">(</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span> <span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="sc">'\n'</span><span class="p">;</span> <span class="c1">// equal sum_sub( 1, 2, 1 ) = 1 + 2 - 1 = 2</span>
<span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">f5</span><span class="p">(</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">10</span> <span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="sc">'\n'</span><span class="p">;</span> <span class="c1">// equal sum_sub( 1, 10, 3 ) = 1 + 10 - 3 = 8</span></code></pre></figure>

<h2 id="06-substituting-2-parameters-but-changing-only-the-second">06. Substituting 2 parameters, but changing only the second</h2>
<blockquote>
  <p><code class="highlighter-rouge">_2 = y</code>, <code class="highlighter-rouge">x = 1</code>, <code class="highlighter-rouge">z = 3</code>. You have to pass 2 parameters (otherwise, don’t compile), but the first one will be ignored!</p>
</blockquote>

<figure class="highlight"><pre><code class="language-cpp" data-lang="cpp"><span class="k">auto</span> <span class="n">f6</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">bind</span><span class="p">(</span> <span class="n">sum_sub</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">_2</span><span class="p">,</span> <span class="mi">3</span> <span class="p">);</span>
<span class="c1">//                             |      |_________________________________</span>
<span class="c1">//                             |                                       |</span>
<span class="c1">//                             |__________________________________     |</span>
<span class="c1">//                                                               |     |</span>
<span class="c1">//            ignored                                            |     | </span>
<span class="c1">//               ↓                                               |     |</span>
<span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">f6</span><span class="p">(</span> <span class="mi">897</span><span class="p">,</span> <span class="mi">0</span><span class="cm">/* _2 */</span> <span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="sc">'\n'</span><span class="p">;</span> <span class="c1">//     equal sum_sub( 1, 0, 3 ) = 1 + 0 - 3 = -2</span>

<span class="c1">//            ignored   </span>
<span class="c1">//               ↓</span>
<span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">f6</span><span class="p">(</span> <span class="mi">800</span><span class="p">,</span> <span class="mi">2</span><span class="cm">/* _2 */</span> <span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="sc">'\n'</span><span class="p">;</span><span class="c1">// equal sum_sub( 1, 2, 0 ) = 1 + 2 - 0 = 2</span></code></pre></figure>

<!-- LISTA MIN -->
<script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>

<p><ins class="adsbygoogle" style="display:inline-block;width:730px;height:95px" data-ad-client="ca-pub-2838251107855362" data-ad-slot="5351066970"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<h2 id="07-replacing-only-the-3rd-parameter">07. Replacing only the 3rd parameter</h2>
<blockquote>
  <p>To understand once and for all! <code class="highlighter-rouge">x = _3</code>, you need to enter 3 parameters (otherwise it does not compile), because you are using <code class="highlighter-rouge">_3</code>, but the first two will be ignored.</p>
</blockquote>

<figure class="highlight"><pre><code class="language-cpp" data-lang="cpp"><span class="k">auto</span> <span class="n">f7</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">bind</span><span class="p">(</span> <span class="n">sum_sub</span><span class="p">,</span> <span class="n">_3</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span> <span class="p">);</span>
<span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">f7</span><span class="p">(</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">30</span> <span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="sc">'\n'</span><span class="p">;</span> <span class="c1">// z = 8 , equal sum_sub( 1, 3, 8 ) = 30 + 1 - 3 = 28</span></code></pre></figure>

<h2 id="08-using-alias">08. Using alias</h2>
<blockquote>
  <p>New name function: <code class="highlighter-rouge">show_name( std::string &amp; )</code></p>
</blockquote>

<figure class="highlight"><pre><code class="language-cpp" data-lang="cpp"><span class="cp">#include &lt;iostream&gt;
#include &lt;functional&gt;
</span>
<span class="k">namespace</span> <span class="n">pl</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">placeholders</span><span class="p">;</span>

<span class="kt">void</span> <span class="nf">show_name</span><span class="p">(</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">&amp;</span><span class="n">name</span> <span class="p">){</span>
  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">name</span> <span class="o">&lt;&lt;</span> <span class="sc">'\n'</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span> <span class="kt">int</span> <span class="n">argc</span> <span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span> <span class="p">){</span>

  <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">name</span><span class="p">(</span><span class="s">"Hello placeholders"</span><span class="p">);</span>
  <span class="k">auto</span> <span class="n">fn1</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">bind</span><span class="p">(</span> <span class="n">show_name</span><span class="p">,</span> <span class="n">pl</span><span class="o">::</span><span class="n">_1</span> <span class="p">);</span>
  <span class="n">fn1</span><span class="p">(</span> <span class="n">name</span> <span class="p">);</span>

  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<h2 id="09-without-using-the-auto">09. Without using the <code class="highlighter-rouge">auto</code></h2>

<figure class="highlight"><pre><code class="language-cpp" data-lang="cpp"><span class="n">std</span><span class="o">::</span><span class="n">function</span><span class="o">&lt;</span><span class="kt">void</span><span class="p">(</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">&amp;</span> <span class="p">)</span><span class="o">&gt;</span> <span class="n">fn2</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">bind</span><span class="p">(</span> <span class="n">show_name</span> <span class="p">,</span> <span class="n">pl</span><span class="o">::</span><span class="n">_1</span> <span class="p">);</span>
<span class="n">name</span> <span class="o">=</span> <span class="s">"Like, a boss!"</span><span class="p">;</span> <span class="c1">// declared and initialized in the previous example!</span>
<span class="n">fn2</span><span class="p">(</span> <span class="n">name</span> <span class="p">);</span></code></pre></figure>

<h2 id="10-without-indicating-namespace">10. Without indicating <code class="highlighter-rouge">namespace</code></h2>

<figure class="highlight"><pre><code class="language-cpp" data-lang="cpp"><span class="cp">#include &lt;iostream&gt;
#include &lt;functional&gt;
</span>
<span class="kt">int</span> <span class="nf">add3</span><span class="p">(</span><span class="kt">int</span> <span class="n">x1</span><span class="p">,</span> <span class="kt">int</span> <span class="n">x2</span><span class="p">,</span> <span class="kt">int</span> <span class="n">x3</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="n">x1</span> <span class="o">+</span> <span class="n">x2</span> <span class="o">+</span> <span class="n">x3</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span> <span class="kt">int</span> <span class="n">argc</span> <span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span> <span class="p">){</span>
  <span class="k">auto</span> <span class="n">fadd3</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">bind</span><span class="p">(</span><span class="n">add3</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">placeholders</span><span class="o">::</span><span class="n">_1</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">placeholders</span><span class="o">::</span><span class="n">_2</span><span class="p">);</span>
  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">fadd3</span><span class="p">(</span><span class="mi">22</span><span class="p">,</span> <span class="mi">33</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="sc">'\n'</span><span class="p">;</span>
  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<blockquote>
  <p>Trivia: If you use pure <code class="highlighter-rouge">std::bind</code>, it may give you an incorrect result. Another thing is also if you use lib boost bind: <code class="highlighter-rouge">boost::bind</code> is not compatible with <code class="highlighter-rouge">std::bind</code>.</p>
</blockquote>

<!-- RETANGULO LARGO 2 -->
<script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>

<p><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-2838251107855362" data-ad-slot="8549252987"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<h2 id="useful-links">Useful links</h2>
<ul>
  <li><a href="https://en.cppreference.com/w/cpp/utility/functional/placeholders">https://en.cppreference.com/w/cpp/utility/functional/placeholders</a></li>
  <li><a href="https://stackoverflow.com/questions/22422147/why-is-stdbind-not-working-without-placeholders-in-this-example-member-functi">https://stackoverflow.com/questions/22422147/why-is-stdbind-not-working-without-placeholders-in-this-example-member-functi</a></li>
  <li><a href="http://gcc.gnu.org/onlinedocs/gcc-4.6.2/libstdc++/api/a01150.html">http://gcc.gnu.org/onlinedocs/gcc-4.6.2/libstdc++/api/a01150.html</a></li>
</ul>

:ET