I"lw<p><img src="/assets/img/dev/c.jpg" alt="Examples of functions: fread(), fwrite(), remove() and others in C" /></p>

<h2 id="fread"><code class="highlighter-rouge">fread()</code></h2>

<p>We can write and read blocks of data. For that, we have the functions <code class="highlighter-rouge">fread()</code> and <code class="highlighter-rouge">fwrite()</code>. The <code class="highlighter-rouge">fread()</code> prototype is:</p>

<blockquote>
  <p><code class="highlighter-rouge">unsigned fread (void *buffer, int numero_de_bytes, int count, FILE *fp);</code></p>
</blockquote>

<p>The <strong>buffer</strong> is the memory region where the read data will be stored. The number of bytes is the size of the drive to be read. count indicates how many units to read. This means that the total number of bytes read is:</p>

<blockquote>
  <p><code class="highlighter-rouge">byte_number * count</code></p>
</blockquote>

<p>The function returns the number of units actually read. This number may be less than count when the end of file is encountered or an error occurs. When the file is opened for binary data, fread can read any data type.</p>

<p>Example:</p>

<blockquote>
  <p>There must be a file in the directory before you will run the program, for example: <code class="highlighter-rouge">echo "This content will be read" &gt;&gt; the_file.txt</code></p>
</blockquote>

<figure class="highlight"><pre><code class="language-c" data-lang="c"><span class="cp">#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
      <span class="c1">// We declare a pointer (link to memory address) to file name: 'pf'</span>
      <span class="kt">FILE</span> <span class="o">*</span><span class="n">pf</span><span class="p">;</span>
      <span class="kt">char</span> <span class="n">content</span><span class="p">[</span><span class="mi">100</span><span class="p">];</span>

      <span class="n">pf</span> <span class="o">=</span> <span class="n">fopen</span><span class="p">(</span><span class="s">"the_file.txt"</span><span class="p">,</span> <span class="s">"rb"</span><span class="p">);</span> <span class="cm">/* Open file again for reading */</span>

      <span class="n">fread</span><span class="p">(</span><span class="o">&amp;</span><span class="n">content</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">char</span><span class="p">),</span> <span class="mi">100</span><span class="p">,</span><span class="n">pf</span><span class="p">);</span> <span class="cm">/* Reads the value of the previously stored variable pf */</span>

      <span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">The the_file.txt content is':</span><span class="se">\n</span><span class="s"> %s </span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">content</span><span class="p">);</span>

      <span class="n">fclose</span><span class="p">(</span><span class="n">pf</span><span class="p">);</span>

      <span class="k">return</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure>

<!-- RETANGULO LARGO -->
<script async="" src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>

<!-- Informat -->
<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-2838251107855362" data-ad-slot="2327980059" data-ad-format="auto" data-full-width-responsive="true"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<h2 id="fwrite"><code class="highlighter-rouge">fwrite()</code></h2>

<p>The <code class="highlighter-rouge">fwrite()</code> function works like your companion <code class="highlighter-rouge">fread()</code>, but writing to the file. Your prototype is:</p>

<blockquote>
  <p><code class="highlighter-rouge">unsigned fwrite(void *buffer,int byte_number,int count,FILE *fp);</code></p>
</blockquote>

<p>The function returns the number of items written. This value will be equal to count unless an error occurs.</p>

<p>Example:</p>

<figure class="highlight"><pre><code class="language-c" data-lang="c"><span class="cp">#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
</span><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
        <span class="kt">FILE</span> <span class="o">*</span><span class="n">pf</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">NUM</span> <span class="o">=</span> <span class="mi">88</span><span class="p">;</span> 
        <span class="kt">int</span> <span class="n">pilido</span><span class="p">;</span>
        <span class="k">if</span><span class="p">((</span><span class="n">pf</span> <span class="o">=</span> <span class="n">fopen</span><span class="p">(</span><span class="s">"files/file.bin"</span><span class="p">,</span> <span class="s">"wb"</span><span class="p">))</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">){</span> <span class="cm">/* Open binary file for writing */</span>
                <span class="n">printf</span><span class="p">(</span><span class="s">"Error opening file"</span><span class="p">);</span>
                <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
        <span class="p">}</span>   
        <span class="k">if</span><span class="p">(</span><span class="n">fwrite</span><span class="p">(</span><span class="o">&amp;</span><span class="n">NUM</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">),</span> <span class="mi">1</span><span class="p">,</span><span class="n">pf</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">1</span><span class="p">)</span>     <span class="cm">/* Write variable NUM | the sizeof operator, which returns the size in bytes of the variable or data type. */</span>
                <span class="n">printf</span><span class="p">(</span><span class="s">"Error writing file."</span><span class="p">);</span>
        <span class="n">fclose</span><span class="p">(</span><span class="n">pf</span><span class="p">);</span>                                    <span class="cm">/* Close the file */</span>
        <span class="k">if</span><span class="p">((</span><span class="n">pf</span> <span class="o">=</span> <span class="n">fopen</span><span class="p">(</span><span class="s">"files/file.bin"</span><span class="p">,</span> <span class="s">"rb"</span><span class="p">))</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">){</span> <span class="cm">/* Open file again for reading */</span>
                <span class="n">printf</span><span class="p">(</span><span class="s">"Error opening file."</span><span class="p">);</span>
                <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
        <span class="p">}</span>   
        <span class="k">if</span><span class="p">(</span><span class="n">fread</span><span class="p">(</span><span class="o">&amp;</span><span class="n">pilido</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">),</span> <span class="mi">1</span><span class="p">,</span><span class="n">pf</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">1</span><span class="p">)</span> <span class="cm">/* Reads the value of the previously stored variable */</span>
                <span class="n">printf</span><span class="p">(</span><span class="s">"Error reading file."</span><span class="p">);</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">The value of NUM read from file is:' %d </span><span class="se">\n\n</span><span class="s">"</span><span class="p">,</span> <span class="n">pilido</span><span class="p">);</span>
        <span class="n">fclose</span><span class="p">(</span><span class="n">pf</span><span class="p">);</span>
        <span class="k">return</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure>

<!-- RETANGULO LARGO 2 -->
<script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>

<p><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-2838251107855362" data-ad-slot="8549252987"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<h2 id="remove"><code class="highlighter-rouge">remove()</code></h2>

<p>Prototype:</p>

<blockquote>
  <p><code class="highlighter-rouge">int remove (char *filename);</code></p>
</blockquote>

<p>Deletes a specified file.</p>

<p>Example:</p>

<figure class="highlight"><pre><code class="language-c" data-lang="c"><span class="cp">#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
#include &lt;stdlib.h&gt;
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>      
<span class="cm">/*  0 (zero) is true, and 1 (one) is false, numbers are used in C! */</span>
<span class="k">if</span><span class="p">(</span><span class="n">remove</span><span class="p">(</span><span class="s">"removed_file.txt"</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">){</span>
      <span class="n">printf</span><span class="p">(</span><span class="s">"File successfully removed!</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
<span class="p">}</span><span class="k">else</span><span class="p">{</span>
      <span class="n">printf</span><span class="p">(</span><span class="s">"Not removed, may not exist.</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
<span class="p">}</span>
      <span class="k">return</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure>

<!-- QUADRADO -->
<script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>

<p><ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-2838251107855362" data-ad-slot="5351066970"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<h2 id="fprintf-and-fscanf"><code class="highlighter-rouge">fprintf()</code> and <code class="highlighter-rouge">fscanf()</code></h2>

<p>Standard file streams allow the programmer to read and write files in the standard way we read and wrote them on screen.</p>

<ul>
  <li><code class="highlighter-rouge">fprintf()</code>: The fprintf() function works like the <code class="highlighter-rouge">printf()</code> function. The difference is that the output of <code class="highlighter-rouge">fprintf()</code> is a file and not the computer screen.</li>
</ul>

<p>Prototype:</p>

<blockquote>
  <p><code class="highlighter-rouge">int fprintf (FILE *fp,char *str,…);</code></p>
</blockquote>

<p>As we might expect, the only difference from the <code class="highlighter-rouge">fprintf()</code> prototype to the <code class="highlighter-rouge">printf()</code> prototype is the specification of the target file through the file pointer.</p>

<ul>
  <li><code class="highlighter-rouge">fscanf()</code>: The <strong>fscanf()</strong> function works like the <strong>scanf()</strong> function. The difference is that <strong>fscanf()</strong> reads from a file and not from the computer keyboard.</li>
</ul>

<p>Fprintf and fscanf example:</p>

<blockquote>
  <p>A <strong>warning</strong> may appear on your compiler, but it will work!</p>
</blockquote>

<figure class="highlight"><pre><code class="language-c" data-lang="c"><span class="cp">#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
</span><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
   <span class="kt">FILE</span> <span class="o">*</span><span class="n">p</span><span class="p">;</span>
   <span class="kt">char</span> <span class="n">str</span><span class="p">[</span><span class="mi">80</span><span class="p">],</span> <span class="n">c</span><span class="p">;</span>
   <span class="cm">/* Read a name for the file to open: */</span>
   <span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">Enter a file name: "</span><span class="p">);</span>
   <span class="n">scanf</span><span class="p">(</span><span class="s">"%s"</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">str</span><span class="p">);</span> <span class="cm">/* don't get() but scanf like this */</span>
   <span class="k">if</span> <span class="p">(</span><span class="o">!</span> <span class="p">(</span><span class="n">p</span> <span class="o">=</span> <span class="n">fopen</span><span class="p">(</span><span class="n">str</span><span class="p">,</span> <span class="s">"w"</span><span class="p">)</span> <span class="p">)</span> <span class="p">)</span> <span class="p">{</span> <span class="cm">/* If an error occurs while opening the file .. */</span>
       <span class="cm">/* program aborts automatically */</span>
       <span class="n">printf</span><span class="p">(</span><span class="s">"Error! Unable to open file! </span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
       <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
   <span class="p">}</span>
   <span class="cm">/* If no error, print to file, close ... */</span>
   <span class="n">fprintf</span> <span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="s">"This is a file called (with or without path and format): </span><span class="se">\n</span><span class="s">%s</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">str</span><span class="p">);</span>
   <span class="n">fclose</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
   <span class="cm">/* opens again for reading */</span>
   <span class="n">p</span> <span class="o">=</span> <span class="n">fopen</span><span class="p">(</span><span class="n">str</span><span class="p">,</span> <span class="s">"r"</span><span class="p">);</span>
   <span class="k">while</span><span class="p">(</span> <span class="o">!</span> <span class="n">feof</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="p">)</span> <span class="p">{</span>
       <span class="n">fscanf</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="s">"%c"</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">c</span><span class="p">);</span>
       <span class="n">printf</span> <span class="p">(</span><span class="s">"%c"</span><span class="p">,</span> <span class="n">c</span><span class="p">);</span>
   <span class="p">}</span>
   <span class="n">fclose</span> <span class="p">(</span><span class="n">p</span><span class="p">);</span>
   <span class="k">return</span> <span class="p">(</span><span class="mi">0</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure>

<!-- LISTA MIN -->
<script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>

<p><ins class="adsbygoogle" style="display:inline-block;width:730px;height:95px" data-ad-client="ca-pub-2838251107855362" data-ad-slot="5351066970"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<h2 id="fputs"><code class="highlighter-rouge">fputs()</code></h2>

<p>The <strong>C</strong> function library int fputs (<code class="highlighter-rouge">const char * str, FILE * stream</code>) writes a string to the specified stream up to, but not including, the null character.</p>

<p>Declaration</p>

<p>Following is the statement for the fputs() function:</p>

<blockquote>
  <p><code class="highlighter-rouge">int fputs (const char * str, FILE * stream)</code></p>
</blockquote>

<p>Parameters</p>

<ul>
  <li><strong>str</strong> - This is an array containing the null terminating string of characters to be written.</li>
  <li><strong>stream</strong> - This is the pointer to a file object that identifies the stream where the string is to be written.</li>
</ul>

<p>Return value</p>

<p>Writes a string to a file. This function returns a non-negative value plus, in case of error returns <code class="highlighter-rouge">EOF</code>.</p>

<p>Example:</p>

<figure class="highlight"><pre><code class="language-c" data-lang="c"><span class="cp">#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
      <span class="kt">FILE</span> <span class="o">*</span><span class="n">fp</span><span class="p">;</span>

      <span class="n">fp</span> <span class="o">=</span> <span class="n">fopen</span><span class="p">(</span><span class="s">"my_file.txt"</span><span class="p">,</span> <span class="s">"w+"</span><span class="p">);</span>

      <span class="n">fputs</span><span class="p">(</span><span class="s">"This is programming C."</span><span class="p">,</span> <span class="n">fp</span><span class="p">);</span>
      <span class="n">fputs</span><span class="p">(</span><span class="s">"This is a system programming language.</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">fp</span><span class="p">);</span>

      <span class="n">fclose</span><span class="p">(</span><span class="n">fp</span><span class="p">);</span>

      <span class="k">return</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure>

<p>Then run at the terminal (even if you didn’t create the file before): <code class="highlighter-rouge">cat my_file.txt</code> and look at the content created with your <strong>C</strong> code! =)</p>

<!-- QUADRADO -->
<script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>

<p><ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-2838251107855362" data-ad-slot="5351066970"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<h2 id="fgets"><code class="highlighter-rouge">fgets()</code></h2>

<p>To read a string in a file we can use fgets() whose prototype is:</p>

<blockquote>
  <p><code class="highlighter-rouge">char *fgets (char *str, int the_size,FILE *fp);</code></p>
</blockquote>

<p>The function takes 3 arguments: the string to read, the upper limit of characters to read, and the pointer to <strong>FILE</strong>, which is associated with the file from which the string will be read. The function reads the string until a newline character. either read or length-1 characters have been read. If the newline character (‘<code class="highlighter-rouge">\n</code>’) is read, it will be part of the string, which was not the case with gets. The resulting string will always end with ‘<code class="highlighter-rouge">\0</code>’ (so only 1 character length maximum will be read). The fgets function is similar to the <code class="highlighter-rouge">gets()</code> function, but in addition to being able to read from a data file and including the newline character in the string, it still specifies the maximum length of the input string. As we have seen, the gets function did not have this control, which could lead to “buffer overflow” errors. Therefore, given that the fp pointer can be replaced by stdin, as we saw above, an alternative to using gets is to use the following construct:</p>

<blockquote>
  <p><code class="highlighter-rouge">fgets (str, the_size, stdin);</code></p>
</blockquote>

<p>where str is the string being read and size must be equal to the size allocated for the string subtracted from 1, because of the <code class="highlighter-rouge">\0</code>.</p>

<p>Example:</p>

<figure class="highlight"><pre><code class="language-c" data-lang="c"><span class="cp">#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
#include &lt;stdlib.h&gt;
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="kt">FILE</span> <span class="o">*</span><span class="n">p</span><span class="p">;</span>
    <span class="kt">char</span> <span class="n">str</span><span class="p">[</span><span class="mi">30</span><span class="p">],</span> <span class="n">phrase</span><span class="p">[]</span> <span class="o">=</span> <span class="s">"This is a file called: "</span><span class="p">,</span> <span class="n">resp</span><span class="p">[</span><span class="mi">80</span><span class="p">];</span>
    <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
    <span class="cm">/* Reads a name for the file to open: */</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">Enter a file name: "</span><span class="p">);</span>
    <span class="n">fgets</span><span class="p">(</span><span class="n">str</span><span class="p">,</span><span class="mi">29</span><span class="p">,</span><span class="n">stdin</span><span class="p">);</span>                                    <span class="cm">/* Use fgets like gets */</span>
    <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">str</span><span class="p">[</span><span class="n">i</span><span class="p">];</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="k">if</span><span class="p">(</span><span class="n">str</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">==</span><span class="sc">'\n'</span><span class="p">)</span> <span class="n">str</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>        <span class="cm">/* Delete \n from read string */</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">p</span> <span class="o">=</span> <span class="n">fopen</span><span class="p">(</span><span class="n">str</span><span class="p">,</span><span class="s">"w"</span><span class="p">)))</span>                              <span class="cm">/* If there is an error opening the file..*/</span>
    <span class="p">{</span>                                                       <span class="cm">/* the program automatically aborts */</span>
       <span class="n">printf</span><span class="p">(</span><span class="s">"Error! Unable to open file!</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
       <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="cm">/* If there was no error, print to file, and close it ...*/</span>
    <span class="n">fputs</span><span class="p">(</span><span class="n">phrase</span><span class="p">,</span> <span class="n">p</span><span class="p">);</span>
    <span class="n">fputs</span><span class="p">(</span><span class="n">str</span><span class="p">,</span><span class="n">p</span><span class="p">);</span>
    <span class="n">fclose</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
    <span class="cm">/* open again and read */</span>
    <span class="n">p</span> <span class="o">=</span> <span class="n">fopen</span><span class="p">(</span><span class="n">str</span><span class="p">,</span><span class="s">"r"</span><span class="p">);</span>
    <span class="n">fgets</span><span class="p">(</span><span class="n">resp</span><span class="p">,</span> <span class="mi">79</span><span class="p">,</span> <span class="n">p</span><span class="p">);</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="se">\n\n</span><span class="s">%s</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">resp</span><span class="p">);</span>
    <span class="n">fclose</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>                       <span class="cm">/* Close the file */</span>
    <span class="n">remove</span><span class="p">(</span><span class="n">str</span><span class="p">);</span>                     <span class="cm">/* Delete file */</span>
    <span class="k">return</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure>

<h2 id="ferror-and-perror"><code class="highlighter-rouge">ferror()</code> and <code class="highlighter-rouge">perror()</code></h2>

<p>Ferror Prototype:</p>

<blockquote>
  <p><code class="highlighter-rouge">int ferror (FILE *fp);</code> . The function returns zero if no errors occurred and a nonzero number if any errors occurred while accessing the file. <code class="highlighter-rouge">ferror()</code> becomes very useful when we want to verify that each access to a file has been successful so that we can ensure the integrity of our data. In most cases, if a file can be opened, it can be read or written. However, there are situations where this does not occur. For example, you may run out of disk space while recording, or the disk may be bad and unable to read, etc. One function that can be used in conjunction with <code class="highlighter-rouge">ferror()</code> is the <code class="highlighter-rouge">perror()</code> (<strong>p</strong>rint <strong>error</strong>) function, whose argument is a string that usually indicates where in the program the problem occurred.</p>
</blockquote>

<p>Example:</p>

<figure class="highlight"><pre><code class="language-c" data-lang="c"><span class="cp">#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
	<span class="kt">FILE</span> <span class="o">*</span><span class="n">pf</span><span class="p">;</span>
	<span class="kt">char</span> <span class="n">string</span><span class="p">[</span><span class="mi">100</span><span class="p">];</span>
	<span class="k">if</span><span class="p">((</span><span class="n">pf</span> <span class="o">=</span> <span class="n">fopen</span><span class="p">(</span><span class="s">"the_file.txt"</span><span class="p">,</span><span class="s">"w"</span><span class="p">))</span> <span class="o">==</span><span class="nb">NULL</span><span class="p">){</span>
	      <span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">I can't open the_file! "</span><span class="p">);</span>
	      <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
	<span class="p">}</span> <span class="k">do</span> <span class="p">{</span>
	      <span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">Enter a new string. To finish, type &lt;enter&gt;: "</span><span class="p">);</span>
	      <span class="n">scanf</span><span class="p">(</span><span class="s">"%s"</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">string</span><span class="p">);</span> <span class="cm">/* you don't use the get() function but scanf this way */</span>
	      <span class="n">fputs</span><span class="p">(</span><span class="n">string</span><span class="p">,</span> <span class="n">pf</span><span class="p">);</span>
	      <span class="n">putc</span><span class="p">(</span><span class="sc">'\n'</span><span class="p">,</span> <span class="n">pf</span><span class="p">);</span>
	      <span class="k">if</span><span class="p">(</span><span class="n">ferror</span><span class="p">(</span><span class="n">pf</span><span class="p">))</span> <span class="p">{</span>
		      <span class="n">perror</span><span class="p">(</span><span class="s">"Recording Error."</span><span class="p">);</span>
		      <span class="n">fclose</span><span class="p">(</span><span class="n">pf</span><span class="p">);</span>
		      <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
	      <span class="p">}</span>
	<span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="n">strlen</span><span class="p">(</span><span class="n">string</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">);</span>
	<span class="n">fclose</span><span class="p">(</span><span class="n">pf</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure>

<!-- LISTA MIN -->
<script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>

<p><ins class="adsbygoogle" style="display:inline-block;width:730px;height:95px" data-ad-client="ca-pub-2838251107855362" data-ad-slot="5351066970"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<h2 id="fseek"><code class="highlighter-rouge">fseek()</code></h2>

<p>To make random searches and accesses in files use the function <code class="highlighter-rouge">fseek()</code>. It moves the current read or write position in the file to a specified value from a specified point. Your prototype is:</p>

<blockquote>
  <p><code class="highlighter-rouge">int fseek (FILE *fp,long numbytes,int origin );</code></p>
</blockquote>

<p>The source parameter determines where the move numbytes will be counted from. Possible values are defined by macros in stdio.h</p>

<h2 id="rewind"><code class="highlighter-rouge">rewind()</code></h2>

<p>The prototype rewind() function:</p>

<blockquote>
  <p><code class="highlighter-rouge">void rewind (FILE *fp);</code></p>
</blockquote>

<p>returns the current file position to the beginning.</p>
:ET