I"ı+<p><img src="/assets/img/dev/awk.jpg" alt="AWK Basic Tutorial" /></p>

<h2 id="introduction">Introduction</h2>

<p><a href="https://www.gnu.org/software/gawk/manual/gawk.html">AWK</a> is an interpreted programming language that is generally used to make shell scripts more powerful and feature-rich. It is mostly used to process data in text and file operations.</p>

<blockquote>
  <p>The name comes from the first letter of the surname of each of the creators: Alfred <strong>A</strong>ho, Peter <strong>W</strong>einberger and Brian <strong>K</strong>ernighan.</p>
</blockquote>

<p>This language is considered by many to be an important milestone in the history of programming, having had a great influence on the creation of other programming languages, such as Perl and Python.</p>

<!-- RETANGULO LARGO 2 -->
<script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>

<p><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-2838251107855362" data-ad-slot="8549252987"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<h2 id="awk-variants">AWK Variants</h2>

<ul>
  <li>BWK: Also known as AWK or NAWK refers to the version by Brian Kernighan.</li>
  <li>GAWK: (GNU AWK) is another open source implementation (OPEN SOURCE)</li>
  <li>MAWK: It‚Äôs a much faster AWK implementation version by Mike Brennan (‚Ä¶)</li>
</ul>

<h3 id="example-1">Example 1</h3>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">awk</span> <span class="s1">'{ print "Hello, World" }'</span>
<span class="nb">awk</span> <span class="nt">-f</span> hello.awk</code></pre></figure>

<p>The <strong>- f</strong> flag says that the following command is a program to execute.</p>

<p>For an executable program, use <strong>/usr/bin/awk</strong>.</p>

<p>For example, create a <strong>world.awk</strong> file with the content</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="c"># !/usr/bin/awk -f</span>
<span class="c"># My first awk script</span>
<span class="o">{</span> print <span class="s2">"Hello, World!"</span> <span class="o">}</span></code></pre></figure>

<p>Making this file executable</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">chmod</span> +x world.awk</code></pre></figure>

<p>Running</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">./world.awk</code></pre></figure>

<!-- QUADRADO -->
<script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>

<p><ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-2838251107855362" data-ad-slot="5351066970"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<h2 id="language-variables">Language Variables</h2>

<p>Save the <strong>dogs.txt</strong> File</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">rex calm skinny yellow
skinny angry white white
fat white lennon
fat angry white fred</code></pre></figure>

<p>Print entire file</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">awk</span> <span class="s1">'{print $0}'</span> dogs.txt</code></pre></figure>

<ul>
  <li><code class="highlighter-rouge">$1</code> prints the dog‚Äôs name,</li>
  <li><code class="highlighter-rouge">$2</code> a color,</li>
  <li><code class="highlighter-rouge">$3</code> your mood,</li>
  <li><code class="highlighter-rouge">$4</code> your fitness.</li>
</ul>

<p>We can use these variables within the print command. In it, whenever we put a comma, we are spacing</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">awk</span> <span class="s1">'{print "The",$1,"is",$4}'</span> dogs.txt</code></pre></figure>

<p>Output</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">The rex is yellow
The skinny is white
The fat is 
The fat is fred</code></pre></figure>

<p>Without spaces</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">awk</span> <span class="s1">'{print "The"$1"is"$4}'</span> dogs.txt</code></pre></figure>

<p>Output</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">Therexisyellow
Theskinnyiswhite
Thefatis
Thefatisfred</code></pre></figure>

<!-- LISTA MIN -->
<script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>

<p><ins class="adsbygoogle" style="display:inline-block;width:730px;height:95px" data-ad-client="ca-pub-2838251107855362" data-ad-slot="5351066970"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<h2 id="using-begin">Using <code class="highlighter-rouge">BEGIN</code></h2>

<p>With <code class="highlighter-rouge">BEGIN</code>, AWK doesn‚Äôt wait for an entry (like typing ENTER twice), it executes everything from that block.</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">awk</span> <span class="s1">'BEGIN {print "Everything will be\nprinted\nat once"}'</span></code></pre></figure>

<p>Output</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">Everything will be
printed
at once</code></pre></figure>

<!-- QUADRADO -->
<script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>

<p><ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-2838251107855362" data-ad-slot="5351066970"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<h2 id="tips">Tips</h2>

<ul>
  <li>We use the <strong>- F</strong> flag to tell <strong>AWK</strong> that we will use the **CSV (comma separated values) **.</li>
  <li>As in <strong>language C</strong>, AWK also has the command <strong>printf</strong>, which is much more flexible than <strong>print</strong>.
    <blockquote>
      <p>The only thing print does that printf doesn‚Äôt do is automatically put a new line at the end of the string <strong>\n</strong>.</p>
    </blockquote>
  </li>
</ul>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">awk</span> <span class="s1">'{printf "Dog Color% s:% s \n", $1, $2}'</span> dogs.txt</code></pre></figure>

<ul>
  <li><strong>sprintf</strong>: It acts and has the same syntax as <strong>printf</strong>. The difference is that its output is stored in a variable rather than displayed on the screen.</li>
</ul>

<h2 id="user-defined-variables">User Defined Variables</h2>

<p>Cannot start variables by digits, they are case sensitive, must not have the same name as AWK variables, or other commands, and do not need to be initialized or declared.</p>

<p>When using the first variable, it is either an empty string (‚Äú‚Äù) or ‚Äú0‚Äù, but it is not good to trust your script with these initial values.</p>

<p>AWK is poorly typed, that is, you can assign a number to a variable and then not assign a string, for example.</p>

<blockquote>
  <p>Ex .: Save as ‚Äú<strong>dogs2.awk</strong>‚Äù</p>
</blockquote>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">BEGIN <span class="o">{</span> <span class="nv">namecolor</span><span class="o">=</span><span class="s2">"%-15s %20s</span><span class="se">\n</span><span class="s2">"</span><span class="p">;</span> <span class="nb">printf </span>namecolor, <span class="s2">"Name"</span>, <span class="s2">"Color</span><span class="se">\n</span><span class="s2">"</span><span class="o">}</span>
 <span class="o">{</span> <span class="nb">printf </span>namecolor, <span class="nv">$1</span>, <span class="nv">$2</span><span class="o">}</span></code></pre></figure>

<p>Run: <code class="highlighter-rouge">awk -f dogs2.awk dogs.txt</code></p>

<!-- QUADRADO -->
<script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>

<p><ins class="adsbygoogle" style="display:inline-block;width:730px;height:95px" data-ad-client="ca-pub-2838251107855362" data-ad-slot="5351066970"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<h2 id="if-and-comparison-operators"><code class="highlighter-rouge">if</code> and comparison operators</h2>

<p>These are the control statements that control the flow of program execution in AWK. In AWK, they are similar to C, and have the same looping and interactions as the Shell pattern.</p>

<blockquote>
  <p>They are: <strong>if, while, for, do and the like</strong>.</p>
</blockquote>

<p>File: <strong>gnu.txt</strong></p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">Eric    59 3 2112
Linus    30 5 578
Richard   40 3 2789
Marcos   24 1 134</code></pre></figure>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">awk</span> <span class="s1">'{ if($4 &gt; 2000) print $1 }'</span> gnu.txt</code></pre></figure>

<p>Output:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">Eric
Richard</code></pre></figure>

<p>Directing the exit</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">awk</span> <span class="s1">'BEGIN {print 1+1 &gt; "result" }'</span> gnu.txt</code></pre></figure>

<p>View: <code class="highlighter-rouge">cat result</code></p>

<h2 id="else-and-else-if"><code class="highlighter-rouge">else</code> and <code class="highlighter-rouge">else if</code></h2>

<!-- QUADRADO -->
<script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>

<p><ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-2838251107855362" data-ad-slot="5351066970"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<p>Create a file: <code class="highlighter-rouge">vim conditions.awk</code> and insert this content:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="c">#!/usr/bin/awk -f</span>
<span class="o">{</span>
 <span class="k">if</span> <span class="o">(</span><span class="nv">$1</span> <span class="o">==</span> <span class="s2">"Eric"</span><span class="o">)</span>
 <span class="nb">printf</span> <span class="s2">"The first </span><span class="se">\n</span><span class="s2">"</span>
 <span class="k">else if</span> <span class="o">(</span><span class="nv">$1</span> <span class="o">==</span> <span class="s2">"Linus"</span><span class="o">)</span>
 <span class="nb">printf</span> <span class="s2">"the second</span><span class="se">\n</span><span class="s2">"</span>
 <span class="k">else
 </span><span class="nb">printf</span> <span class="s2">"Other person</span><span class="se">\n</span><span class="s2">"</span>
<span class="o">}</span></code></pre></figure>

<p>Run: <code class="highlighter-rouge">awk -f conditions.awk gnu.txt</code></p>

<hr />

<p>This was just an introduction to Awk, in the future we‚Äôll see more tips.</p>

<p>Thanks for reading!</p>
:ET