I"U<h1 id="overview">Overview</h1>

<ul>
  <li><a href="https://ninja-build.org/">Ninja</a> is an alternative to <a href="https://en.terminalroot.com.br/how-to-create-a-makefile/">Make</a>.</li>
  <li><a href="https://mesonbuild.com/">Meson</a> is an alternative to <a href="https://en.terminalroot.com.br/how-to-compile-your-programs-with-cmake/">CMake</a>.</li>
</ul>

<p>Just like you use <strong>CMake</strong> (creating a <code class="highlighter-rouge">CMakeLists.txt</code> file) to generate the <code class="highlighter-rouge">Makefile</code> file and then use the <code class="highlighter-rouge">make</code> command.</p>
<blockquote>
  <p>Although you can also use CMake for Ninja too.</p>
</blockquote>

<p>You use <strong>Meson</strong> (creating the <strong>meson.ninja</strong> file) to generate the <strong>ninja.build</strong> file and then use the <code class="highlighter-rouge">ninja</code> command.</p>

<p>But how to do that?</p>

<hr />

<h1 id="how-to-compile-programs-with-ninja">How to compile programs with Ninja</h1>
<p><img src="/assets/img/cpp/ninja-build.jpg" alt="How to compile programs with Ninja Build" /></p>

<p><a href="https://ninja-build.org/">Ninja</a> is a small build system with a focus on speed. In essence, Ninja is an alternative to <a href="https://en.terminalroot.com.br/how-to-create-a-makefile/">Make</a>. Ninja is used by several projects, having as its main client <a href="https://www.google.pt/intl/pt-BR/chrome/">Google Chrome</a> and <a href="https://www.android.com/">Android</a>, and is used by most developers working on <a href="https://en.terminalroot.com.br/gcc-vs-llvm-which-is-the-best-compiler/">LLVM</a>.</p>

<p>Unlike Make, a “build generator” must be used to generate Ninja build files. <a href="https://en.m.wikipedia.org/wiki/GYP_(software)">Gyp</a>, <a href="https://cmake.org/">CMake</a>, <a href="https://mesonbuild.com/">Meson</a> and <a href="https://gn.googlesource.com/gn/">gn</a> are popular build management software tools that support the creation of build files for Ninja.</p>

<p>The process is very similar to that of <a href="https://en.terminalroot.com.br/how-to-create-a-makefile/">Make</a>.</p>
<h2 id="compiling-in-c-single-file">Compiling in <a href="https://en.terminalroot.com.br/examples-of-functions-fread-fwrite-remove-and-others-in-c/">C</a>, single file:</h2>
<p>Assuming you have this code (<a href="https://en.wikipedia.org/wiki/&quot;Hello,_World!&quot;_program">Hello, World!</a>) in <strong>C</strong>: <code class="highlighter-rouge">vim main.c</code>. In this example we use the command [gcc]https://en.terminalroot.com.br/gnu-autotools-ultimate-tutorial-for-beginners/) to compile a single file, but below, see multiple files in C++, which only changes the command and the number of files.</p>

<!-- QUADRADO -->
<script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>

<p><ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-2838251107855362" data-ad-slot="5351066970"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<figure class="highlight"><pre><code class="language-c" data-lang="c"><span class="cp">#include&lt;stdio.h&gt;
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">printf</span><span class="p">(</span><span class="s">"Hello, World!</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<p>To compile with Ninja, you will need to create a ** build.ninja ** file with the following content: <code class="highlighter-rouge">vim build.ninja</code></p>

<figure class="highlight"><pre><code class="language-make" data-lang="make"><span class="err">rule</span> <span class="err">cc</span>
  <span class="nv">command</span> <span class="o">=</span> gcc <span class="nt">-c</span> <span class="nt">-o</span> <span class="nv">$out</span> <span class="nv">$in</span>
  <span class="nv">description</span> <span class="o">=</span> CC <span class="nv">$out</span>
 
<span class="err">rule</span> <span class="err">link</span>
  <span class="nv">command</span> <span class="o">=</span> gcc <span class="nt">-o</span> <span class="nv">$out</span> <span class="nv">$in</span>
  <span class="nv">description</span> <span class="o">=</span> LINK <span class="nv">$out</span>
 
<span class="nl">build src.o</span><span class="o">:</span> <span class="nf">cc main.c</span>
<span class="nl">build demo-c</span><span class="o">:</span> <span class="nf">link src.o</span></code></pre></figure>

<p>Analyzing the file above, according to previous knowledge about <a href="https://en.terminalroot.com.br/how-to-create-a-makefile/">Make</a>, for example, we noticed that the file that will be compiled we define as: <strong>main.c</strong>, the temporary file we call <strong>src.o</strong> and the final binary file we name <strong>demo-c</strong>.</p>

<p>Now, just be in the directory you saved and via the command line run:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">ninja</code></pre></figure>

<p>And then just run the program:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">./demo-c</code></pre></figure>

<!-- LISTA MIN -->
<script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>

<p><ins class="adsbygoogle" style="display:inline-block;width:730px;height:95px" data-ad-client="ca-pub-2838251107855362" data-ad-slot="5351066970"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<p>There are several options such as cleaning the temporary file(s) and among other options, for more details visit the <a href="https://ninja-build.org/manual.html">manual</a>.</p>

<h2 id="compiling-in-c-multiple-files">Compiling in <a href="https://terminalroot.com.br/cpp">C++</a>, multiple files:</h2>
<p>For this example we will use <a href="https://github.com/terroo/utilscpp/tree/master/dec2bin">Dec2Bin</a>, a mini program that converts decimal to binary in <a href="https://github.com/terroo/utilscpp">C++</a>. In this example we use the command <a href="https://en.terminalroot.com.br/gnu-autotools-ultimate-tutorial-for-beginners/">g++</a> to compile multiple files. There are <strong>3 files</strong>, of which <strong>1</strong> is just a <code class="highlighter-rouge">.hpp</code> library:</p>
<blockquote>
  <p><code class="highlighter-rouge">vim main.cpp</code></p>
</blockquote>

<figure class="highlight"><pre><code class="language-cpp" data-lang="cpp"><span class="cp">#include &lt;iostream&gt;
#include &lt;string&gt;
#include "dectobin.hpp"
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span> <span class="kt">int</span> <span class="n">argc</span> <span class="p">,</span> <span class="kt">char</span><span class="o">**</span> <span class="n">argv</span> <span class="p">)</span> <span class="p">{</span>
  <span class="n">Dectobin</span> <span class="n">db</span><span class="p">;</span>
  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="p">(</span> <span class="n">argc</span> <span class="o">&gt;</span> <span class="mi">1</span> <span class="o">?</span> <span class="n">db</span><span class="p">.</span><span class="n">dtob</span><span class="p">(</span> <span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="p">)</span> <span class="o">:</span> <span class="n">db</span><span class="p">.</span><span class="n">get_m_help</span><span class="p">()</span> <span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<blockquote>
  <p><code class="highlighter-rouge">vim dectobin.hpp</code></p>
</blockquote>

<figure class="highlight"><pre><code class="language-cpp" data-lang="cpp"><span class="cp">#ifndef DEC_TO_BIN_H
#define DEC_TO_BIN_H
</span><span class="k">class</span> <span class="nc">Dectobin</span><span class="p">{</span>
    <span class="nl">public:</span>
        <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">dtob</span><span class="p">(</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">num</span> <span class="p">);</span>
        <span class="kt">void</span> <span class="n">set_m_help</span><span class="p">();</span>
        <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">get_m_help</span><span class="p">();</span>

    <span class="nl">private:</span>
        <span class="k">const</span> <span class="k">static</span> <span class="kt">int</span> <span class="n">m_max</span><span class="p">{</span><span class="mi">20</span><span class="p">};</span>
        <span class="kt">int</span> <span class="n">m_number</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">m_modules</span><span class="p">[</span> <span class="n">m_max</span> <span class="p">];</span>
        <span class="kt">int</span> <span class="n">m_i</span><span class="p">;</span>
        <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">m_output</span><span class="p">;</span>
        <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">m_help</span><span class="p">;</span>
<span class="p">};</span>
<span class="cp">#endif</span></code></pre></figure>

<!-- LISTA MIN -->
<script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>

<p><ins class="adsbygoogle" style="display:inline-block;width:730px;height:95px" data-ad-client="ca-pub-2838251107855362" data-ad-slot="5351066970"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<blockquote>
  <p><code class="highlighter-rouge">vim dectobin.cpp</code></p>
</blockquote>

<figure class="highlight"><pre><code class="language-cpp" data-lang="cpp"><span class="cp">#include &lt;iostream&gt;
#include &lt;string&gt;
#include "dectobin.hpp"
</span>
<span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">Dectobin</span><span class="o">::</span><span class="n">dtob</span><span class="p">(</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">num</span> <span class="p">){</span>
      <span class="n">m_number</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">stoi</span><span class="p">(</span> <span class="n">num</span> <span class="p">);</span>
      <span class="k">if</span> <span class="p">(</span> <span class="n">m_number</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">)</span> <span class="p">{</span>
        <span class="n">m_output</span> <span class="o">=</span> <span class="s">"0"</span><span class="p">;</span>
      <span class="p">}</span><span class="k">else</span><span class="p">{</span>
        <span class="k">for</span> <span class="p">(</span><span class="n">m_i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">m_number</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">;</span> <span class="n">m_i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
          <span class="n">m_modules</span><span class="p">[</span><span class="n">m_i</span><span class="p">]</span> <span class="o">=</span> <span class="n">m_number</span> <span class="o">%</span> <span class="mi">2</span><span class="p">;</span>
          <span class="n">m_number</span> <span class="o">=</span> <span class="n">m_number</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">for</span> <span class="p">(</span><span class="n">m_i</span> <span class="o">=</span> <span class="n">m_i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">m_i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">m_i</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
          <span class="n">m_output</span> <span class="o">+=</span> <span class="n">std</span><span class="o">::</span><span class="n">to_string</span><span class="p">(</span> <span class="n">m_modules</span><span class="p">[</span><span class="n">m_i</span><span class="p">]</span> <span class="p">);</span>
        <span class="p">}</span>
      <span class="p">}</span>
    <span class="k">return</span> <span class="n">m_output</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="n">Dectobin</span><span class="o">::</span><span class="n">set_m_help</span><span class="p">(){</span>
    <span class="n">m_help</span> <span class="o">=</span> <span class="s">"Enter a number."</span><span class="p">;</span>
<span class="p">}</span>

<span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">Dectobin</span><span class="o">::</span><span class="n">get_m_help</span><span class="p">(){</span>
    <span class="n">set_m_help</span><span class="p">();</span>
    <span class="k">return</span> <span class="n">m_help</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<!-- RETANGULO LARGO 2 -->
<script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>

<p><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-2838251107855362" data-ad-slot="8549252987"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<p>We saved the files inside the <strong>dec2bin</strong> directory:</p>

<figure class="highlight"><pre><code class="language-cpp" data-lang="cpp"><span class="n">cd</span> <span class="n">dec2bin</span><span class="o">/</span>
<span class="n">ls</span>
<span class="n">dectobin</span><span class="p">.</span><span class="n">cpp</span> <span class="n">dectobin</span><span class="p">.</span><span class="n">hpp</span> <span class="n">main</span><span class="p">.</span><span class="n">cpp</span></code></pre></figure>

<p>In the same way as the previous one, we will create a file <strong>build.ninja</strong>, only with the following settings:</p>

<figure class="highlight"><pre><code class="language-make" data-lang="make"><span class="err">rule</span> <span class="err">cc</span>
  <span class="nv">command</span> <span class="o">=</span> g++ <span class="nt">-c</span> <span class="nt">-o</span> <span class="nv">$out</span> <span class="nv">$in</span>
  <span class="nv">description</span> <span class="o">=</span> CC <span class="nv">$out</span>
 
<span class="err">rule</span> <span class="err">link</span>
  <span class="nv">command</span> <span class="o">=</span> g++ <span class="nt">-o</span> <span class="nv">$out</span> <span class="nv">$in</span>
  <span class="nv">description</span> <span class="o">=</span> LINK <span class="nv">$out</span>
 
<span class="nl">build source1.o</span><span class="o">:</span> <span class="nf">cc main.cpp</span>
<span class="nl">build source2.o</span><span class="o">:</span> <span class="nf">cc dectobin.cpp</span>
<span class="nl">build program-cpp</span><span class="o">:</span> <span class="nf">link source1.o source2.o</span></code></pre></figure>

<p>Then just run the <code class="highlighter-rouge">ninja</code> command and the <code class="highlighter-rouge">program-cpp</code> file will be ready in the same directory. See the output in the image below where we used the program to convert the decimal number: <strong>9</strong> to binary: <strong>1001</strong>:</p>

<!-- RETANGULO LARGO -->
<script async="" src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>

<!-- Informat -->
<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-2838251107855362" data-ad-slot="2327980059" data-ad-format="auto" data-full-width-responsive="true"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<p><img src="/assets/img/cpp/ninja-cpp.png" alt="Dec2Bin compiled with g++ via Ninja Build" /></p>

<hr />

<h1 id="how-to-compile-programs-with-meson-build">How to Compile Programs with Meson Build</h1>
<p><img src="/assets/img/cpp/meson-build.jpg" alt="How to Compile Programs with Meson Build" /></p>

<p><a href="https://mesonbuild.com/">Meson</a> is a software tool to automate the construction (compilation) of software. He is a front-end for <a href="https://en.terminalroot.com.br/how-to-compile-programs-with-ninja/">Ninja</a>. Meson is free and open source software written in Python, under the Apache License 2.0.</p>

<p><a href="https://en.wikipedia.org/wiki/Meson_(software)">Meson</a> supports the languages ​​<a href="https://en.terminalroot.com.br/examples-of-functions-fread-fwrite-remove-and-others-in-c/">C</a>, <a href="https://terminalroot.com.br/cpp">C++</a>, CUDA, D, Objective-C, Fortran, <a href="https://en.terminalroot.com.br/jython-the-language-that-mixes-java-with-python/">Java</a>, C#, Rust and Vala, and has a mechanism for handling dependencies called Wrap.</p>

<p>Meson supports GNU Compiler Collection, Clang, Microsoft Visual Studio and others.</p>

<h1 id="how-to-compile-a-program-with-meson">How to compile a program with Meson</h1>
<p>For a simple way of understanding, let’s create an example for a program <a href="https://en.terminalroot.com.br/hello-world-in-25-programming-languages-proposal-docs-and-links/">Hello, World!</a> in <a href="https://terminalroot.com.br/cpp">C++</a>. Assuming you have the following file:</p>

<figure class="highlight"><pre><code class="language-cpp" data-lang="cpp"><span class="cp">#include &lt;iostream&gt;
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Hello, World! Meson Build!"</span> <span class="o">&lt;&lt;</span> <span class="sc">'\n'</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<p>In the same directory as your code file/project you should create a file named <strong>meson.build</strong>: <code class="highlighter-rouge">vim meson.build</code></p>

<figure class="highlight"><pre><code class="language-cmake" data-lang="cmake"><span class="nb">project</span><span class="p">(</span>'tutorial', 'cpp'<span class="p">)</span>
<span class="nf">executable</span><span class="p">(</span>'demo', 'main.cpp'<span class="p">)</span></code></pre></figure>

<p>Let’s create the file: <strong>tutorial</strong>, the language is <strong>cpp</strong>(C++), the final binary file will have the name: <strong>demo</strong> and the file we are going to compile is <strong>main.cpp</strong>.</p>

<p>Once this is done, the next step is to run the command:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">meson builddir</code></pre></figure>

<!-- QUADRADO -->
<script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>

<p><ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-2838251107855362" data-ad-slot="5351066970"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<p>The output will look like this:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">marcos@gentoo ~<span class="nv">$ </span>meson builddir
The Meson build system
Version: 0.53.1
Source <span class="nb">dir</span>: /home/marcos/teste-meson-ninja
Build <span class="nb">dir</span>: /home/marcos/teste-meson-ninja/builddir
Build <span class="nb">type</span>: native build
Project name: tutorial
Project version: undefined
C++ compiler <span class="k">for </span>the host machine: c++ <span class="o">(</span>gcc 9.2.0 <span class="s2">"c++ (Gentoo 9.2.0-r2 p3) 9.2.0"</span><span class="o">)</span>
C++ linker <span class="k">for </span>the host machine: c++ GNU ld.bfd 2.33.1
Host machine cpu family: x86_64
Host machine cpu: x86_64
Build targets <span class="k">in </span>project: 1

Found ninja-1.9.0.git.kitware.dyndep-1.jobserver-1 at /usr/bin/ninja
marcos@gentoo ~<span class="nv">$ </span></code></pre></figure>

<p>It will create a directory with the name <strong>builddir</strong> and we need to enter it to make the build:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">cd </span>builddir
ninja</code></pre></figure>

<p>After that just run the generated executable file:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">./demo
Hello, World! Meson Build!</code></pre></figure>

<p>For more information and details see the <a href="https://mesonbuild.com/Tutorial.html">official documentation</a>.</p>

<p>Simple, right? Thanks!</p>

:ET