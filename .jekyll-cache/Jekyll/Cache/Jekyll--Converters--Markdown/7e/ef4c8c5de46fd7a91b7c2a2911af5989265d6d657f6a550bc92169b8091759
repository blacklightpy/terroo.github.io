I"r5<p><img src="/assets/img/cppdaily/expat.jpg" alt="How to parse XML with Expat in C/C++" /></p>

<p>In today’s <strong>cpp::daily</strong> we will talk about one of the most used libraries in the world.</p>

<p>There are several libraries to parse <strong>XML</strong> and we will already post a list of the best ones. Each with its pros and cons, but <a href="https://libexpat.github.io/">Expat</a> has a lot of differentials, starting with the fact that it is nominated by the <a href="https://www.w3c.br/">W3C</a>.</p>

<p>Of course, Expat is the most difficult to implement, but the guarantee of the result is 100%. Besides being the most used of all, projects such as: AbiWord, Android Studio, Apache OpenOffice, Audacity, aria2, <a href="https://en.terminalroot.com.br/how-to-compile-your-programs-with-cmake/">CMake</a>, D-Bus, Electron, Elinks, Firefox, Git, Godot, LibreOffice and many others use it.</p>

<p>Expat can be implemented by several <a href="https://en.terminalroot.com.br/tested-the-performance-of-10-programming-languages/">programming languages</a>, such as: <a href="https://en.terminalroot.com.br/the-30-best-python-libraries-and-packages-for-beginners/">Python</a>, PHP, Perl and others.</p>

<!-- QUADRADO -->
<script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>

<p><ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-2838251107855362" data-ad-slot="5351066970"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<p>It was written in <a href="https://en.terminalroot.com.br/examples-of-functions-fread-fwrite-remove-and-others-in-c/">C</a> and can be intimidating due to the many types of handlers and options you can define. But you only need to learn four functions to do 80% of what you want to do with them:</p>

<ul>
  <li><code class="highlighter-rouge">XML_ParserCreate</code> - To create a new analyzer object.</li>
  <li><code class="highlighter-rouge">XML_SetElementHandler</code> - To define handlers for start and end tags.</li>
  <li><code class="highlighter-rouge">XML_SetCharacterDataHandler</code> - To define the handler for text.</li>
  <li><code class="highlighter-rouge">XML_Parse</code> - To pass a buffer full of documents to the analyzer</li>
</ul>

<p>First of all you need to have it installed in your include. It is in all distro repositories, so just use your distro’s package manager, examples:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">emerge expat <span class="c"># Gentoo, Funtoo, ...</span>
<span class="nb">sudo </span>apt <span class="nb">install </span>expat <span class="c"># Debian, Ubuntu, Mint, ...</span>
<span class="nb">sudo </span>pacman <span class="nt">-S</span> expat <span class="c"># Arch, Manjaro, ...</span>
<span class="nb">sudo </span>dnf <span class="nb">install </span>expat <span class="c"># Red Hat, Fedora, ...</span></code></pre></figure>

<!-- LISTA MIN -->
<script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>

<p><ins class="adsbygoogle" style="display:inline-block;width:730px;height:95px" data-ad-client="ca-pub-2838251107855362" data-ad-slot="5351066970"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<p>To understand, let’s show an example of a code and for more details, I suggest reading the <a href="https://libexpat.github.io/doc/">documentation</a>, which is very concise, because the only thing I missed in the documentation was a simple example to understand in general lines.</p>

<p>So, I created this basic, but already functional example. For didactic purposes the code is not object oriented so that you can use it in both <a href="https://en.terminalroot.com.br/examples-of-functions-fread-fwrite-remove-and-others-in-c/">C</a> and <a href="https://en.terminalroot.com.br/how-to-customize-your-vim-from-zero-to-c-cpp-ubuntu-cinnamon/">C++</a>.</p>

<p>For this we are going to use this XML example: <code class="highlighter-rouge">vim programmers.xml</code></p>

<figure class="highlight"><pre><code class="language-xml" data-lang="xml"><span class="cp">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="nt">&lt;data&gt;</span>
  <span class="nt">&lt;programmer&gt;</span>
    <span class="nt">&lt;name&gt;</span>Bjarne Stroustroup<span class="nt">&lt;/name&gt;</span>
    <span class="nt">&lt;language&gt;</span>C++<span class="nt">&lt;/language&gt;</span>
    <span class="nt">&lt;birth&gt;</span>December 30, 1950<span class="nt">&lt;/birth&gt;</span>
    <span class="nt">&lt;country&gt;</span>Denmark<span class="nt">&lt;/country&gt;</span>
    <span class="nt">&lt;profession&gt;</span>Computer Scientist<span class="nt">&lt;/profession&gt;</span>
    <span class="nt">&lt;website&gt;</span>https://www.stroustrup.com/<span class="nt">&lt;/website&gt;</span>
  <span class="nt">&lt;/programmer&gt;</span>
  <span class="nt">&lt;programmer&gt;</span>
    <span class="nt">&lt;name&gt;</span>Dennis Ritchie<span class="nt">&lt;/name&gt;</span>
    <span class="nt">&lt;language&gt;</span>C<span class="nt">&lt;/language&gt;</span>
    <span class="nt">&lt;birth&gt;</span>September 9, 1941<span class="nt">&lt;/birth&gt;</span>
    <span class="nt">&lt;country&gt;</span>USA<span class="nt">&lt;/country&gt;</span>
    <span class="nt">&lt;profession&gt;</span>Physicist, Mathematical and BCS<span class="nt">&lt;/profession&gt;</span>
    <span class="nt">&lt;website&gt;</span>https://web.archive.org/<span class="nt">&lt;/website&gt;</span>
  <span class="nt">&lt;/programmer&gt;</span>
  <span class="nt">&lt;programmer&gt;</span>
    <span class="nt">&lt;name&gt;</span>Brian Kernighan<span class="nt">&lt;/name&gt;</span>
    <span class="nt">&lt;language&gt;</span>AWK<span class="nt">&lt;/language&gt;</span>
    <span class="nt">&lt;birth&gt;</span>January 1, 1942<span class="nt">&lt;/birth&gt;</span>
    <span class="nt">&lt;country&gt;</span>Canada<span class="nt">&lt;/country&gt;</span>
    <span class="nt">&lt;profession&gt;</span>Computer Scientist, Engineer and Professor<span class="nt">&lt;/profession&gt;</span>
    <span class="nt">&lt;website&gt;</span>https://www.cs.princeton.edu/~bwk/<span class="nt">&lt;/website&gt;</span>
  <span class="nt">&lt;/programmer&gt;</span>
<span class="nt">&lt;/data&gt;</span></code></pre></figure>

<p>And to read this XML we will use this code: <code class="highlighter-rouge">vim main.cpp</code></p>

<!-- RETANGULO LARGO 2 -->
<script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>

<p><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-2838251107855362" data-ad-slot="8549252987"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<figure class="highlight"><pre><code class="language-cpp" data-lang="cpp"><span class="cp">#include &lt;iostream&gt;
#include &lt;expat.h&gt;
#include &lt;cstring&gt; // strlen
</span> 
<span class="kt">void</span> <span class="nf">start</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">userData</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">name</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">args</span><span class="p">[]){</span>
   <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">name</span> <span class="o">&lt;&lt;</span> <span class="s">": "</span><span class="p">;</span>
<span class="p">}</span>
 
<span class="kt">void</span> <span class="nf">value</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">userData</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">val</span><span class="p">,</span> <span class="kt">int</span> <span class="n">len</span><span class="p">){</span>
   <span class="kt">int</span> <span class="n">I</span><span class="p">;</span>
   <span class="kt">char</span> <span class="n">cpy</span><span class="p">[</span><span class="mi">128</span><span class="p">]</span> <span class="o">=</span> <span class="p">{};</span>
   
   <span class="k">for</span><span class="p">(</span><span class="n">I</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">I</span> <span class="o">&lt;</span> <span class="n">len</span><span class="p">;</span> <span class="n">I</span><span class="o">++</span><span class="p">){</span>
      <span class="n">cpy</span><span class="p">[</span><span class="n">I</span><span class="p">]</span> <span class="o">=</span> <span class="n">val</span><span class="p">[</span><span class="n">I</span><span class="p">];</span>
   <span class="p">}</span>

   <span class="n">cpy</span><span class="p">[</span><span class="n">I</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
   
   <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">cpy</span><span class="p">;</span>
<span class="p">}</span>
 
<span class="kt">void</span> <span class="nf">end</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">userData</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">name</span><span class="p">){}</span>
 
<span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
   <span class="n">XML_Parser</span> <span class="n">parser</span> <span class="o">=</span> <span class="n">XML_ParserCreate</span><span class="p">(</span><span class="nb">NULL</span><span class="p">);</span>
 
   <span class="n">XML_SetElementHandler</span><span class="p">(</span><span class="n">parser</span><span class="p">,</span> <span class="n">start</span><span class="p">,</span> <span class="n">end</span><span class="p">);</span>
   
   <span class="n">XML_SetCharacterDataHandler</span><span class="p">(</span><span class="n">parser</span><span class="p">,</span> <span class="n">value</span><span class="p">);</span>
   
   <span class="kt">char</span> <span class="n">val</span><span class="p">[</span><span class="mi">1024</span><span class="p">]</span> <span class="o">=</span> <span class="p">{};</span>
   <span class="kt">FILE</span> <span class="o">*</span><span class="n">fh</span> <span class="o">=</span> <span class="n">fopen</span><span class="p">(</span><span class="s">"programmers.xml"</span><span class="p">,</span> <span class="s">"r"</span><span class="p">);</span>

   <span class="n">fread</span><span class="p">(</span><span class="o">&amp;</span><span class="n">val</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">char</span><span class="p">),</span> <span class="mi">1024</span><span class="p">,</span> <span class="n">fh</span><span class="p">);</span>
   <span class="n">fclose</span><span class="p">(</span> <span class="n">fh</span> <span class="p">);</span>

   <span class="n">XML_Parse</span><span class="p">(</span><span class="n">parser</span><span class="p">,</span> <span class="n">val</span><span class="p">,</span> <span class="n">strlen</span><span class="p">(</span> <span class="n">val</span> <span class="p">),</span> <span class="n">XML_TRUE</span><span class="p">);</span>
   <span class="n">XML_ParserFree</span><span class="p">(</span><span class="n">parser</span><span class="p">);</span>
   
   <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<p>To compile, run the command:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">g++ main.cpp <span class="nt">-lexpat</span> <span class="nt">-o</span> parser</code></pre></figure>

<p>Now just run <code class="highlighter-rouge">./parser</code> and notice that the tags are displayed by the function <code class="highlighter-rouge">start(void * userData, const char * name, const char * args [])</code> more precisely by the <code class="highlighter-rouge">name</code> variable.</p>

<p>And the content of the tags by the <code class="highlighter-rouge">value(void * userData, const char * val, int len)</code> more precisely by the variable <code class="highlighter-rouge">cpy</code>. The end function has no content, as it will be used in the XML_SetElementHandler, as stated above.</p>

<p>Try to modify, display in tables and others as an exercise practice, ok ?!</p>

<h3 id="useful-links">Useful links</h3>
<ul>
  <li><a href="https://www.xml.com/pub/1999/09/expat/index.html">https://www.xml.com/pub/1999/09/expat/index.html</a></li>
  <li><a href="https://libexpat.github.io/doc/expat-internals-a-simple-parse/">https://libexpat.github.io/doc/expat-internals-a-simple-parse/</a></li>
  <li><a href="https://www.xml.com/pub/a/1999/11/cplus/index.html">https://www.xml.com/pub/a/1999/11/cplus/index.html</a></li>
  <li><a href="https://techybook.in/c-cpp-xml-parsing-using-expat/">https://techybook.in/c-cpp-xml-parsing-using-expat/</a></li>
  <li><a href="https://stackoverflow.com/questions/27672815/parsing-xml-file-with-expat-library-in-c">https://stackoverflow.com/questions/27672815/parsing-xml-file-with-expat-library-in-c</a></li>
</ul>

:ET