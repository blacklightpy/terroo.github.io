I""F<blockquote>
  <p>Sed is a non-interactive text editor. It comes from English [S]tream [ED]itor, ie text flow editor. GNU Sed is currently used by most Linux distributions and has the most new features: GNU/Linux.</p>
</blockquote>

<p>It’s case sensitive</p>

<ul>
  <li><code class="highlighter-rouge">-i</code> change the file</li>
  <li><code class="highlighter-rouge">-e</code> print to screen without changing file</li>
  <li><code class="highlighter-rouge">-n</code> suppress, show only command output</li>
  <li><code class="highlighter-rouge">s</code>  replaces one piece of text with another</li>
  <li><code class="highlighter-rouge">!</code>  inverts the logic of the command</li>
  <li><code class="highlighter-rouge">;</code>  command separator</li>
  <li><code class="highlighter-rouge">|</code>  string separator</li>
  <li><code class="highlighter-rouge">d</code>  at the end delete</li>
  <li><code class="highlighter-rouge">p</code>  at the end prints</li>
  <li><code class="highlighter-rouge">g</code>  at ​​the end (as d and p is used) changes all occurrences</li>
  <li><code class="highlighter-rouge">q</code>  quit sed, does not continue command</li>
</ul>

<h3 id="complete-list-of-gnu-sed-character-classes">Complete list of GNU sed character classes</h3>

<ul>
  <li><code class="highlighter-rouge">[[: alnum:]]</code> Alphabetic and Numeric [a-z A-Z 0-9]</li>
  <li><code class="highlighter-rouge">[[: alpha:]]</code> Alphabetic [a-z A-Z]</li>
  <li><code class="highlighter-rouge">[[: blank:]]</code> Blank character, space, or tab [\ t]</li>
  <li><code class="highlighter-rouge">[[: cntrl:]]</code> Control characters [\ x00- \ x1F \ x7F]</li>
  <li><code class="highlighter-rouge">[[: digit:]]</code> Numbers [0-9]</li>
  <li><code class="highlighter-rouge">[[: graph:]]</code> Any visible character (i.e. except blank) [\ x20- \ x7E]</li>
  <li><code class="highlighter-rouge">[[: lower:]]</code> Lowercase letters [a-z]</li>
  <li><code class="highlighter-rouge">[[: upper:]]</code> Capital letters [A-Z]</li>
  <li><code class="highlighter-rouge">[[: print:]]</code> Visible characters (ie except control characters) [\ x20- \ x7E]</li>
  <li><code class="highlighter-rouge">[[: punct:]]</code> Score [-! ”# $% &amp; ‘() * +,. /:;? @ [] _` {} ~].</li>
  <li><code class="highlighter-rouge">[[: space:]]</code> White space [\ t \ r \ n \ v \ f]</li>
  <li><code class="highlighter-rouge">[[: xdigit:]]</code> Hexadecimal Number [0-9 a-f A-F]</li>
</ul>

<!-- RETANGULO LARGO -->
<script async="" src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>

<!-- Informat -->
<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-2838251107855362" data-ad-slot="2327980059" data-ad-format="auto" data-full-width-responsive="true"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<p>1 - Swap all words in one file for another</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">sed</span> <span class="nt">-i</span> <span class="s1">'s/word/other/'</span> file.txt</code></pre></figure>

<p>2 - Prints only the ninth line</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">sed</span> <span class="nt">-n</span> <span class="s1">'9p'</span> file.txt</code></pre></figure>

<p>3 - Prints from the sixth line to the ninth line</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">sed</span> <span class="nt">-n</span> <span class="s1">'6.9p'</span> file.txt</code></pre></figure>

<p>4 - Delete all lines containing the word string in the file.</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">sed</span> <span class="nt">-i</span> <span class="s1">'/dmx/d'</span> file.txt</code></pre></figure>

<p>5 - Put one word at the beginning of each line.</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">sed</span> <span class="s1">'s/^/word/'</span> file.txt</code></pre></figure>

<!-- RETANGULO LARGO 2 -->
<script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>

<p><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-2838251107855362" data-ad-slot="8549252987"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<p>6 - Put a word at the end of each line.</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">sed</span> <span class="s1">'s/$/word/'</span> file.txt</code></pre></figure>

<p>7 - Prints only lines that START with the string ‘http’</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">sed</span> <span class="nt">-n</span> <span class="s1">'/^http/p'</span> file.txt</code></pre></figure>

<p>8 - Deletes only lines that START with the string ‘http’</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">sed</span> <span class="nt">-n</span> <span class="s1">'/^http/d'</span> file.txt</code></pre></figure>

<p>9 - Exchange ALL occurrences of the word “marcos”, “eric”, “camila” with the word “penguin”</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">sed</span> <span class="s1">'s/marcos\|eric\|camila/penguin/g'</span> file.txt</code></pre></figure>

<!-- QUADRADO -->
<script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>

<p><ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-2838251107855362" data-ad-slot="5351066970"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<p>10 - Exchange everything between the words “Marcos” and “Eric” for the word “they”, for example, the text is:</p>

<p>“On Saturday Marcos went out to bike with Eric, but they didn’t stay up late.” And it will look like this: “On Saturday they didn’t stay up late.”</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">sed</span><span class="s1">'s/Marcos.*Eric/they/'</span> file.txt</code></pre></figure>

<p>11 - Delete blank line and change file</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">sed</span> <span class="nt">-i</span> <span class="s1">'/^$/d'</span> file.txt</code></pre></figure>

<p>12 - Replaces “foo” with “bar” only lines containing “plop”</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">sed</span> <span class="s1">'/plop/s/foo/bar/g'</span> file.txt</code></pre></figure>

<p>13 - Replaces “foo” with “bar” except lines containing “plop”</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">sed</span> <span class="s1">'/plop/!s/foo/bar/g '</span>file.txt</code></pre></figure>

<p>14 - Insert Line 2 with line 7 the “#” at the beginning of each line</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">sed</span> <span class="s1">'2,7s/^/#/'</span> file.txt</code></pre></figure>

<!-- MINI ANÚNCIO -->
<script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>

<!-- Games Root -->
<p><ins class="adsbygoogle" style="display:inline-block;width:336px;height:100px" data-ad-client="ca-pub-2838251107855362" data-ad-slot="5351066970"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<p>15 - Inserts the word ‘NEW’ at the beginning of each line from line 21 to line 28</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">sed</span> <span class="nt">-i</span> <span class="s1">'21,28s/^/NEW/'</span> file.txt</code></pre></figure>

<p>16 - Swap everything between the tags “&lt;” and “&gt;” for the word “CODE”:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">sed</span> <span class="s1">'s/&lt;[^&gt;]*&gt;/CODE/g'</span> file.txt</code></pre></figure>

<p>17 - Prints only first occurrence of line with given string</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">sed</span> <span class="nt">-n</span> <span class="s1">'/day/{p;q;}'</span> file.txt</code></pre></figure>

<!-- MINI ANÚNCIO -->
<script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>

<!-- Games Root -->
<p><ins class="adsbygoogle" style="display:inline-block;width:300px;height:100px" data-ad-client="ca-pub-2838251107855362" data-ad-slot="5351066970"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<p>18 - Include text at end of line 9</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">sed</span> <span class="s1">'9s/$/end of line/'</span> file.txt</code></pre></figure>

<p>19 - Put all lines into one</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">sed</span> <span class="s1">':a;$!N;s/\n//;ta;'</span> file.txt</code></pre></figure>

<p>20 - Replaces the word “BEAUTY” with “YES” only between certain lines.</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">sed</span> <span class="s1">'3,6s/BEAUTY/YES/'</span> file.txt</code></pre></figure>

<p>21 - Deletes what is between the word “spoke” and “second” (delimiters)</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">sed</span> <span class="s1">'/second/{/spoke/{s/second.*spoke//;t};:a;/spoke/!{N;s/\n//;ta;};s/second.*spoke/\n/;}'</span> file.txt</code></pre></figure>

<!-- RETANGULO LARGO 2 -->
<script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>

<p><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-2838251107855362" data-ad-slot="8549252987"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<p>22 - Removes HTML commands</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">sed</span> <span class="s1">'s/&lt;[^&gt;]*&gt;//g'</span> file.txt</code></pre></figure>

<p>23 - Deletes the 1st character of the sentence.</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">sed</span> <span class="s1">'s/.//'</span> file.txt</code></pre></figure>

<p>24 - Deletes the 4th character of the sentence.</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">sed</span> <span class="s1">'s/.//4'</span> file.txt</code></pre></figure>

<p>25 - Deletes the first 4 characters</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">sed</span> <span class="s1">'s/.\{4\}//'</span> file.txt</code></pre></figure>

<!-- QUADRADO -->
<script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>

<p><ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-2838251107855362" data-ad-slot="5351066970"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<!-- QUADRADO -->
<script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>

<p><ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-2838251107855362" data-ad-slot="5351066970"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<p>26 - Deletes at least 4 characters</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">sed</span> <span class="s1">'s/.\{4,\}//'</span> file.txt</code></pre></figure>

<p>27 - Deletes 2 to 4 characters</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">sed</span> <span class="s1">'s/.\{2,4\}//'</span> file.txt</code></pre></figure>

<p>28 - Range Examples</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">echo</span> <span class="s2">"aáeéiíoóuú"</span> | <span class="nb">sed</span> <span class="s2">"s/[a-u]//g"</span>
áéíóú</code></pre></figure>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">echo</span> <span class="s2">"aáeéiíoóuú"</span> | <span class="nb">sed</span> <span class="s2">"s/[á-ú]//g"</span>
aeiou</code></pre></figure>

<p>29 - Transforms text (URL) into HTML link tags.</p>

<p>It was: <code class="highlighter-rouge">http://www.com</code></p>

<p>It is: <code class="highlighter-rouge">&lt;a href="http://www.com"&gt;http://www.com&lt;/a&gt;</code></p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">sed</span> <span class="s1">'s_\&lt;\(ht\|f\)tp://[^ ]*_&lt;a href="&amp;"&gt;&amp;&lt;/a&gt;_'</span> file.txt</code></pre></figure>

<p>30 - Regular Expressions with SED (sed regex)</p>

<p>This sed reads data from file.txt and erases (command d) from the first line to the line containing 3 numbers in a row, throwing the result on the screen. If you want to save the result, redirect it to another file, not the file.txt itself.</p>

<!-- RETANGULO LARGO -->
<script async="" src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>

<!-- Informat -->
<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-2838251107855362" data-ad-slot="2327980059" data-ad-format="auto" data-full-width-responsive="true"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">sed</span> <span class="s1">'1,/[0-9]\{3\}/d'</span> file.txt</code></pre></figure>

<p>Delete numbers</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">s/[0-9]<span class="se">\+</span>//g<span class="s1">' file.txt</span></code></pre></figure>

<p>Prints only lines containing SCORE</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">sed</span> <span class="nt">-n</span> <span class="s1">'/[[:punct:]]/p'</span> file.txt</code></pre></figure>

<p>Print only lines beginning with Numbers</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">sed</span> <span class="nt">-n</span> <span class="s1">'/^[[:digit:]]/p'</span> file.txt</code></pre></figure>

<h2 id="formatting-phone-number">Formatting Phone Number</h2>

<p>We have a file with the phone numbers like this:</p>

<figure class="highlight"><pre><code class="language-txt" data-lang="txt">7184325689
4333285236
1140014004
3633554488</code></pre></figure>

<p>Running some of these command modes in SED:</p>

<ul>
  <li>Neanderthal Mode</li>
</ul>

<blockquote>
  <p>Replaces 2 characters “..” with “&amp;” which is the output of the request.
Performs another sed to replace 8 characters again with “&amp;”
Note: You must always escape the parentheses “(“ and “)”</p>
</blockquote>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">sed</span> <span class="s1">'s/../\(&amp;\)/'</span> file.txt | <span class="nb">sed</span> <span class="s1">'s/......../&amp;-/'</span> file.txt</code></pre></figure>

<ul>
  <li>Medieval mode</li>
</ul>

<blockquote>
  <p>Same as above, just put the “{8}” to mark 8 characters “.”
Also, ALWAYS need to escape the “{“ and “}” keys</p>
</blockquote>

<!-- QUADRADO -->
<script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>

<p><ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-2838251107855362" data-ad-slot="5351066970"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">sed</span> <span class="s1">'s/../\(&amp;\)/'</span> file.txt | <span class="nb">sed</span> <span class="s1">'s/.\{8\}/&amp;-/'</span> file.txt</code></pre></figure>

<ul>
  <li>Modern mode</li>
</ul>

<p>Instead of throwing the exit, I separated the command with a semicolon “;” and launched another sed “s”</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">sed</span> <span class="s1">'s/../\(&amp;\)/;s/.\{8\}/&amp;-/'</span> arquivo.txt</code></pre></figure>

<ul>
  <li>Postmodern mode</li>
</ul>

<p>This mode is to understand the following</p>

<blockquote>
  <p>The first command in parentheses “(..)”
Then separated by slash <br />
I threw or command in parentheses “\ (.{4 } )”
The first command output goes to bar 1 “\1”
And the second command for slash 2 “\2”
It could also have bar 3, n,…</p>
</blockquote>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">sed</span> <span class="s1">'s/\(..\)\(.\{4\}\)/(\1)\2-/g'</span> arquivo.txt</code></pre></figure>

<p>Stays like this:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="o">(</span>71<span class="o">)</span> 8432-5689
<span class="o">(</span>43<span class="o">)</span> 3328-5236
<span class="o">(</span>11<span class="o">)</span> 4001-4004
<span class="o">(</span>36<span class="o">)</span> 3355-4488</code></pre></figure>

<p>Thanks for read.</p>

:ET