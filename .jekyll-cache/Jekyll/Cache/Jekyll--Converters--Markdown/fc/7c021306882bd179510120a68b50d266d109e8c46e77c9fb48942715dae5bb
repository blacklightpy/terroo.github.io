I"Ä\<p><img src="/assets/img/vim/100-tips-vim.png" alt="100 Tips for the VIM Editor" /></p>

<p>To speak of the <a href="https://www.udemy.com/course/curso-de-vim-moderno-e-vimscript/">Vim</a> editor is to speak of MULTIPLE FACILITIES with simple keystrokes and useful commands. This Cheat Sheet is one of those to bookmark and consult whenever necessary.</p>

<!-- RETANGULO LARGO -->
<script async="" src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>

<!-- Informat -->
<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-2838251107855362" data-ad-slot="2327980059" data-ad-format="auto" data-full-width-responsive="true"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<h2 id="navigation">Navigation</h2>

<table>
  <thead>
    <tr>
      <th>Keys</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong><code class="highlighter-rouge">h</code></strong></td>
      <td>Use the h command to navigate to the left side of the Vim console. This is analogous to the left arrow on your keyboard.</td>
    </tr>
    <tr>
      <td><strong><code class="highlighter-rouge">l</code></strong></td>
      <td>Commands help you navigate right and replace the right arrow key.</td>
    </tr>
    <tr>
      <td><strong><code class="highlighter-rouge">k</code></strong></td>
      <td>Use the lowercase k command to move up. Similar to the up arrow key.</td>
    </tr>
    <tr>
      <td><strong><code class="highlighter-rouge">j</code></strong></td>
      <td>The j command takes you down and is a substitute for the down arrow key.</td>
    </tr>
    <tr>
      <td><strong><code class="highlighter-rouge">H</code></strong></td>
      <td>This command takes the cursor in the upper region of the screen.</td>
    </tr>
    <tr>
      <td><strong><code class="highlighter-rouge">M</code></strong></td>
      <td>Will place the cursor in the middle of the Vim screen.</td>
    </tr>
    <tr>
      <td><strong><code class="highlighter-rouge">L</code></strong></td>
      <td>The capital letter places the cursor at the bottom of the screen.</td>
    </tr>
    <tr>
      <td><strong><code class="highlighter-rouge">0</code></strong>  or <strong>[HOME]</strong></td>
      <td>Entering 0 or the [HOME] button will take you to the beginning of the line.</td>
    </tr>
    <tr>
      <td><strong><code class="highlighter-rouge">^</code></strong></td>
      <td>This is one of the most commonly used Vim commands to get the first nonblank character of a line.</td>
    </tr>
    <tr>
      <td><strong><code class="highlighter-rouge">$</code></strong></td>
      <td>This command takes the cursor at the end of the current line.</td>
    </tr>
    <tr>
      <td><strong><code class="highlighter-rouge">b</code></strong></td>
      <td>The lowercase b command returns tokens.</td>
    </tr>
    <tr>
      <td><strong><code class="highlighter-rouge">w</code></strong></td>
      <td>This command helps you to advance through tokens.</td>
    </tr>
    <tr>
      <td><strong><code class="highlighter-rouge">B</code></strong></td>
      <td>The capital variant of b allows you to return by words.</td>
    </tr>
    <tr>
      <td><strong><code class="highlighter-rouge">W</code></strong></td>
      <td>This command allows you to advance by words.</td>
    </tr>
    <tr>
      <td><strong><code class="highlighter-rouge">ctrl+u</code></strong></td>
      <td>This Vim command is basically a Page Up command. However, it moves the screen in half and keeps the current cursor position.</td>
    </tr>
    <tr>
      <td><strong><code class="highlighter-rouge">ctrl+d</code></strong></td>
      <td>The Page Down variant of the above command works the same way.</td>
    </tr>
    <tr>
      <td><strong><code class="highlighter-rouge">G</code></strong></td>
      <td>Prefix G with a number to jump directly to a specific line number.Suppose that if you have line numbering enabled and are writing a shell script, you can go to line 10 simply by typing 10G.</td>
    </tr>
    <tr>
      <td><strong><code class="highlighter-rouge">#</code></strong></td>
      <td>Given, # is the number of a specific line, entering this command will take you directly to that line. It is one of Vimâ€™s most commonly used commands to jump from one line to another.</td>
    </tr>
    <tr>
      <td><strong><code class="highlighter-rouge">â€œ</code></strong></td>
      <td>This command (two ticks back) takes you where you were.</td>
    </tr>
    <tr>
      <td><strong><code class="highlighter-rouge">)</code></strong></td>
      <td>You can access at the beginning of the following sentence with this command.</td>
    </tr>
    <tr>
      <td><strong><code class="highlighter-rouge">(</code></strong></td>
      <td>Go to at the beginning of the previous sentence.</td>
    </tr>
    <tr>
      <td><strong><code class="highlighter-rouge">}</code></strong></td>
      <td>Used to go to the beginning of the next block of text.</td>
    </tr>
    <tr>
      <td><strong><code class="highlighter-rouge">{</code></strong></td>
      <td>Get the cursor at the beginning of the previous text block. Vim Commands for Editing Text</td>
    </tr>
  </tbody>
</table>

<!-- RETANGULO LARGO 2 -->
<script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>

<p><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-2838251107855362" data-ad-slot="8549252987"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<hr />

<h2 id="command-mode">Command Mode</h2>

<table>
  <thead>
    <tr>
      <th>Keys</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong><code class="highlighter-rouge">i</code></strong></td>
      <td>Pressing i on the console takes you to insert mode. Now you can start typing your texts in Vim. The text you type will appear in front of the cursor key.</td>
    </tr>
    <tr>
      <td><strong><code class="highlighter-rouge">a</code></strong></td>
      <td>There are other commonly used Vim commands you can use to enter text. Text will be appended right after the cursor.</td>
    </tr>
    <tr>
      <td><strong><code class="highlighter-rouge">I</code></strong></td>
      <td>Do you want to place your text at the beginning of the current line? The l command allows you to enter text directly at the desired location.</td>
    </tr>
    <tr>
      <td><strong><code class="highlighter-rouge">A</code></strong></td>
      <td>This is one of my favorite Vim commands for adding text at the end of my current line. It also fits the Vim commands used to enter text.</td>
    </tr>
    <tr>
      <td><strong><code class="highlighter-rouge">o</code></strong></td>
      <td>Pressing the lower case letter o creates a new line just after the current line you are on.</td>
    </tr>
    <tr>
      <td><strong><code class="highlighter-rouge">O</code></strong></td>
      <td>The uppercase variant creates the new line before the current line.</td>
    </tr>
    <tr>
      <td><strong><code class="highlighter-rouge">gf</code></strong></td>
      <td>You can use this little command to open your files under the cursor.</td>
    </tr>
    <tr>
      <td><strong><code class="highlighter-rouge">gi</code></strong></td>
      <td>One of my favorite Vim commands, gi restarts insert mode at the last insertion point you used.</td>
    </tr>
    <tr>
      <td><strong><code class="highlighter-rouge">wq</code></strong></td>
      <td>Entering long text strings does not matter if you cannot save them for future use. Enter the wq command in command mode to save your file and exit Vim.</td>
    </tr>
    <tr>
      <td><strong><code class="highlighter-rouge">q!</code></strong></td>
      <td>Often, you find yourself in a position where you are not satisfied with the text you typed and would like to close the editor without saving its contents. By typing q! In command mode, you can do just that. if by the console</td>
    </tr>
    <tr>
      <td><strong><code class="highlighter-rouge">yy</code></strong></td>
      <td>The yy command lets you copy an entire line. This is something you often use during your time with Vim.</td>
    </tr>
    <tr>
      <td><strong><code class="highlighter-rouge">yw</code></strong></td>
      <td>This is one of the most widely used Vim commands for copying a word in the editor.</td>
    </tr>
    <tr>
      <td><strong><code class="highlighter-rouge">y$</code></strong></td>
      <td>One of my all-time favorite Vim commands offers users the ability to copy text from the current cursor position to the end of a line.</td>
    </tr>
    <tr>
      <td><strong><code class="highlighter-rouge">v</code></strong></td>
      <td>The v command can be used to highlight a single character at a time in combination with the arrow keys (arrows / hjkl).</td>
    </tr>
    <tr>
      <td><strong><code class="highlighter-rouge">d</code></strong></td>
      <td>This is one of the most commonly used Vim commands to delete highlighted texts.</td>
    </tr>
    <tr>
      <td><strong><code class="highlighter-rouge">dd</code></strong></td>
      <td>Do you want to delete an entire line with a single command from Vim? The dd command is created especially for this purpose.</td>
    </tr>
    <tr>
      <td><strong><code class="highlighter-rouge">dw</code></strong></td>
      <td>You can delete a single word quickly with the dw command.</td>
    </tr>
    <tr>
      <td><strong><code class="highlighter-rouge">D</code></strong></td>
      <td>One of the most powerful Vim commands of all time, the D command deletes everything from the current cursor location to the end of the line.</td>
    </tr>
    <tr>
      <td><strong><code class="highlighter-rouge">d0</code></strong></td>
      <td>This command is used to delete everything from the current cursor position to the beginning of the line.</td>
    </tr>
    <tr>
      <td><strong><code class="highlighter-rouge">dgg</code></strong></td>
      <td>You can use this command to delete everything from your current cursor position to the beginning of the file.</td>
    </tr>
    <tr>
      <td><strong><code class="highlighter-rouge">dG</code></strong></td>
      <td>This command erases everything from your current cursor position to the end of the file.</td>
    </tr>
    <tr>
      <td><strong><code class="highlighter-rouge">x</code></strong></td>
      <td>Use the x command whenever you need to delete a single character.</td>
    </tr>
    <tr>
      <td><strong><code class="highlighter-rouge">u</code></strong></td>
      <td>The u command is among the Vim commands most widely used by many to undo the last operation. Combining with a postfix, users can undo several actions. Then you undo the last number of actions.</td>
    </tr>
    <tr>
      <td><strong><code class="highlighter-rouge">ctrl+r</code></strong></td>
      <td>Use the command above to redo the last undo operation.</td>
    </tr>
    <tr>
      <td><strong><code class="highlighter-rouge">.</code></strong></td>
      <td>The dot (.) Command is one of those useful Vim commands that significantly reduces your workload by repeating the last action whenever you need this functionality.</td>
    </tr>
    <tr>
      <td><strong><code class="highlighter-rouge">cc</code></strong></td>
      <td>You can use the cc command to change lines by clearing and entering insert mode at the same time. The cursor is placed at the current level of indentation. Vimâ€™s useful commands for replacing text</td>
    </tr>
  </tbody>
</table>

<hr />

<!-- QUADRADO -->
<script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>

<p><ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-2838251107855362" data-ad-slot="5351066970"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<h2 id="visual-mode">Visual Mode</h2>

<table>
  <thead>
    <tr>
      <th>Keys</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong><code class="highlighter-rouge">r</code></strong></td>
      <td>The r command is a very useful tool for changing a single character. Follow it with [character] and it will change the current character under the cursor with [character].</td>
    </tr>
    <tr>
      <td><strong><code class="highlighter-rouge">R</code></strong></td>
      <td>Uppercase OR opens the input mode, but instead of entering text, you can replace it with this command.</td>
    </tr>
    <tr>
      <td><strong><code class="highlighter-rouge">~</code></strong></td>
      <td>The tilda (~) command is very useful when you need to change the box of one character in your document. Follow it with a number to invert as many characters.</td>
    </tr>
    <tr>
      <td><strong><code class="highlighter-rouge">t[caractere]</code></strong></td>
      <td>Type t [character] to select up to, but not including, the next [character] on a specific line.</td>
    </tr>
    <tr>
      <td><strong><code class="highlighter-rouge">f[caractere]</code></strong></td>
      <td>Press f [character] to select up to and including the next [character] in a line.</td>
    </tr>
    <tr>
      <td><strong><code class="highlighter-rouge">i[caractere]</code></strong></td>
      <td>Do you want to select everything between parentheses or another unique character? Type i [character] to select everything between two consecutive [characters].</td>
    </tr>
    <tr>
      <td><strong><code class="highlighter-rouge">a[caractere]</code></strong></td>
      <td>This command is identical to the previous one, but includes the [character] at both ends of the text. Commands I came most commonly used to search in a document</td>
    </tr>
  </tbody>
</table>

<hr />

<h2 id="search-and-replacement">Search and Replacement</h2>

<table>
  <thead>
    <tr>
      <th>Keys</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong><code class="highlighter-rouge">/</code></strong></td>
      <td>The slash command is the most commonly used command to search large text files in Vim. Just type / and proceed with the text you want Vim to look for you and look at the bottom corner of the console.</td>
    </tr>
    <tr>
      <td><strong><code class="highlighter-rouge">/\c</code></strong></td>
      <td>The option, when directed to the search (/) command, allows users to search for case-sensitive text. Wise use of this command can save hours of hard work.</td>
    </tr>
    <tr>
      <td><strong><code class="highlighter-rouge">?[pattern]</code></strong></td>
      <td>This is one of Vimâ€™s most useful commands for searching previous texts for a given [pattern].</td>
    </tr>
    <tr>
      <td><strong><code class="highlighter-rouge">n</code></strong></td>
      <td>The n command searches in the direction of your last search. Use this command if you know which direction the search item is in.</td>
    </tr>
    <tr>
      <td><strong><code class="highlighter-rouge">N</code></strong></td>
      <td>Almost identical to the above command, but searches in the opposite direction to your last search.</td>
    </tr>
    <tr>
      <td><strong><code class="highlighter-rouge">:%s/[pattern]/[replacement]/g</code></strong></td>
      <td>The above command uses regular expression to search for all occurrences of [pattern] and replaces it with [replacement] without prompting.</td>
    </tr>
    <tr>
      <td><strong><code class="highlighter-rouge">:%s/[pattern]/[replacement]/gc</code></strong></td>
      <td>Same as previous command, but prompts for confirmation before replacing each instance of [default] with [replacement].</td>
    </tr>
    <tr>
      <td><strong><code class="highlighter-rouge">:s/[pattern]/[replacement]/g</code></strong></td>
      <td>Instead of replacing all instances of [default] in your file, this Vim command will only replace those [default] that are on the current line with [replacement].</td>
    </tr>
    <tr>
      <td><strong><code class="highlighter-rouge">:bufdo /[pattern]</code></strong></td>
      <td>This is one of Vimâ€™s powerful commands that allows users to search for [pattern] in all currently opened buffers. This will increase your productivity and significantly shorten your search time.</td>
    </tr>
    <tr>
      <td><strong><code class="highlighter-rouge">:g/string/d</code></strong></td>
      <td>This is one of the useful Vim commands that will be useful whenever you want to delete all lines containing string from your document. Linux Command Tips Sheet for Working with Multiple Files in Vim</td>
    </tr>
  </tbody>
</table>

<!-- QUADRADO -->
<script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>

<p><ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-2838251107855362" data-ad-slot="5351066970"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<hr />

<h2 id="screen-manipulation-and-editing">Screen Manipulation and Editing</h2>

<ul>
  <li><strong><code class="highlighter-rouge">:sp [filename]</code></strong> â†’ Use this command to create a new file and split the console screen horizontally to show the two different buffers.</li>
  <li><strong><code class="highlighter-rouge">:vsp [filename]</code></strong> â†’ The functionality of this Vim command is essentially identical to the above command, but instead of splitting the console horizontally, it splits the screen vertically.</li>
  <li><strong><code class="highlighter-rouge">:bn</code></strong> â†’ This Vim command will change its editor to the next buffer. It is among the few fundamental Vim commands without which you will not be able to work with multiple documents in Vim.</li>
  <li><strong><code class="highlighter-rouge">:bp</code></strong> â†’ Identical to the previous command, but switches to the previous buffer instead of advancing.</li>
  <li><strong><code class="highlighter-rouge">:bd</code></strong> â†’ Use this Vim command when closing a specific buffer. Save your data using the appropriate Vim commands.</li>
  <li><strong><code class="highlighter-rouge">:ls</code></strong> â†’ This is one of the useful Vim commands that will present users with a list of all open buffers.</li>
  <li><strong><code class="highlighter-rouge">ctrl+ws</code></strong> â†’ If you want to split Vim windows horizontally, this is the command you are looking for.</li>
  <li><strong><code class="highlighter-rouge">ctrl+wv</code></strong> â†’ Instead of splitting windows horizontally, this Vim command will split it vertically.</li>
  <li><strong><code class="highlighter-rouge">ctrl+ww</code></strong> â†’ Use this command to switch between multiple windows directly from command mode.</li>
  <li><strong><code class="highlighter-rouge">ctrl+wq</code></strong> â†’ You can use this useful Vim command to exit a specific window.</li>
  <li><strong><code class="highlighter-rouge">ctrl+wh</code></strong> â†’ This command moves your cursor location to the left window.</li>
  <li><strong><code class="highlighter-rouge">ctrl+wl</code></strong> â†’ Same as the previous command, but instead of moving the cursor to the left, this command will point to the right window.</li>
  <li><strong><code class="highlighter-rouge">ctrl+wj</code></strong> â†’ Use this command whenever you want to move a window below the existing window.</li>
  <li><strong><code class="highlighter-rouge">ctrl+wk</code></strong> â†’ Same as above, but takes the cursor to the window above the current one. Vimâ€™s useful commands when working with multiple tabs</li>
  <li><strong><code class="highlighter-rouge">:tabnew</code></strong> â†’ You can use the: tabnew command to create a new tab and work with another document without leaving the current file.</li>
  <li><strong><code class="highlighter-rouge">gt</code></strong> â†’ The gt command will show you the next tab you open.</li>
  <li><strong><code class="highlighter-rouge">:tabfirst</code></strong> â†’ The above command shows the first tab you opened in a specific session.</li>
  <li><strong><code class="highlighter-rouge">:tablast</code></strong> â†’ Same as the previous command, but instead of showing the first tab, it will display the last tab.</li>
  <li><strong><code class="highlighter-rouge">tabm n(position)</code></strong> â†’ This powerful Vim command will be useful whenever you feel the need to rearrange your existing tabs.</li>
  <li><strong><code class="highlighter-rouge">tabdo %s/foo/bar/g</code></strong> â†’ You can use the above command whenever you want to execute a command on all open tabs at the same time.</li>
  <li><strong><code class="highlighter-rouge">:tab ball</code></strong> â†’ This Vim command is one of my favorite Vim commands and puts each open file in one [CODE]:tab ball`**  .</li>
  <li><strong><code class="highlighter-rouge">:new abc.txt</code></strong> â†’ This is one of Vimâ€™s commands that allows you to open a new file called abc.txt in a new window without leaving the current document.</li>
  <li><strong><code class="highlighter-rouge">:w</code></strong> â†’ Pressing this command Vim in command mode saves the current document, but there is no existing session.</li>
  <li><strong><code class="highlighter-rouge">:q</code></strong> â†’ This command exits the current session without saving your changes. Note that you will see error E37 if you have unsaved changes to your document. In such scenarios, you need to override this command and use q! instead.</li>
  <li><strong><code class="highlighter-rouge">:help [command]</code></strong> â†’ The help command performs a search operation on the command you entered and displays relevant information about them directly in the console.</li>
  <li><strong><code class="highlighter-rouge">:e [file]</code></strong> â†’ This command will open a file named [file] and create a new one if it no longer exists in your file system.</li>
  <li><strong><code class="highlighter-rouge">:w [filename]</code></strong> â†’ Use this command to save the existing document directly to a new file named [filename].</li>
  <li><strong><code class="highlighter-rouge">:stop</code></strong> â†’ Writing this command in command mode will suspend your current Vim session. You can also do this by pressing ctrl + z at the same time.</li>
  <li><strong><code class="highlighter-rouge">:browse e</code></strong> â†’ Use this command whenever you want to call the graphics file explorer from your Vim console.</li>
  <li><strong><code class="highlighter-rouge">:%!fmt</code></strong> â†’ Writing this command will align each line of your current file.</li>
  <li><strong><code class="highlighter-rouge">!}fmt</code></strong> â†’ Use it whenever you need to align all lines at the current position of your cursor.</li>
  <li><strong><code class="highlighter-rouge">:set autoindent</code></strong> â†’ This is one of the most commonly used Vim commands that you will use during your time in Vim. It sets autoindent for your current session. Final thoughts</li>
</ul>

<hr />

<p>Meet our <a href="https://www.udemy.com/course/curso-de-vim-moderno-e-vimscript/">Vim Moderno and Vimscript Course at Udemy</a>. Although the classes are in the Portuguese language, Udemy offers automatic translation if you are interested. Link:</p>

<h2 id="httpswwwudemycomcoursecurso-de-vim-moderno-e-vimscript"><a href="https://www.udemy.com/course/curso-de-vim-moderno-e-vimscript/">https://www.udemy.com/course/curso-de-vim-moderno-e-vimscript/</a></h2>

<p>Thanks for reading!</p>
:ET