I"’%<p><img src="/assets/img/gnu/makefile.jpg" alt="How to Create a Makefile" title="How to Create a Makefile" /></p>

<p>In the article we created: <a href="https://en.terminalroot.com.br/gnu-autotools-ultimate-tutorial-for-beginners/">GNU Autotools Definitive Tutorial for Beginners</a> we show all the step by step example for you to generate a <code class="highlighter-rouge">configure</code> in a standard way. And this file (<code class="highlighter-rouge">configure</code>) after execution will generate a <strong>Makefile</strong> to consequently build a project and be properly installed/uninstalled on the system, as well as its examples, documentation and manual.</p>

<p>However, if you think the whole procedure is not necessary for your project (which may be simpler), you can directly create a <a href="https://www.gnu.org/software/make/manual/html_node /Simple-Makefile.html">Makefile</a> <em>on the nail</em> quickly and you will get the same result.</p>

<!-- QUADRADO -->
<script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>

<p><ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-2838251107855362" data-ad-slot="5351066970"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<hr />

<h2 id="introduction">Introduction</h2>

<p>A makefile is a file (by default called ‚ÄúMakefile‚Äù) containing a set of directives used by the <code class="highlighter-rouge">make</code> build automation tool to generate a target/meta (install, uninstall, remove some files and others).</p>

<p>A <em>makefile</em> essentially contains <em>variable</em> assignments, <em>comments</em> and <em>targets</em>. Comments start with the character ‚Äú#‚Äù.</p>

<hr />

<h2 id="basic-example">Basic Example</h2>

<p>You can use a text editor to write your Makefile, however, you need to be aware of the details, as Makefile generates errors even with spaces where it should be TAB. Let‚Äôs look at some lines:</p>

<ul>
  <li><strong>TARGET</strong>, this line will say the final name of the post compiled file;</li>
  <li><strong>CXX</strong>, this line (in this case) will say the name of the program it will compile (I created this variable name CXX): cc, gcc, c ++, g ++, clang, clang ++, ‚Ä¶;</li>
  <li><strong>LD</strong>, this should generate the linker, when you compile more than one file and want to merge all into one, let‚Äôs show in the second example;</li>
  <li><strong>OBJS</strong>, in this example I left as <code class="highlighter-rouge">main.cpp</code>, but it would be all binary to form the linker;</li>
  <li><strong>programname:</strong> note that this line is the variable <strong>OBJS</strong>, because if we only use the <code class="highlighter-rouge">make</code> command, the file will already understand;</li>
  <li><strong>install:</strong> this line you enter the command to copy to a system directory that is part of the <strong>$PATH</strong> variable, using the <code class="highlighter-rouge">install</code> command;</li>
  <li><strong>clean:</strong> and finally we remove the binary files that were built to form the linker.</li>
</ul>

<!-- MINI AN√öNCIO -->
<script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>

<!-- Games Root -->
<p><ins class="adsbygoogle" style="display:inline-block;width:730px;height:95px" data-ad-client="ca-pub-2838251107855362" data-ad-slot="5351066970"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">TARGET</span><span class="o">=</span>programname
<span class="nv">CXX</span><span class="o">=</span>c++
<span class="nv">LD</span><span class="o">=</span>c++
<span class="nv">OBJS</span><span class="o">=</span>main.cpp
programname:<span class="si">$(</span>OBJS<span class="si">)</span>
	<span class="si">$(</span>LD<span class="si">)</span> <span class="nt">-o</span> <span class="si">$(</span>TARGET<span class="si">)</span> <span class="si">$(</span>OBJS<span class="si">)</span>
<span class="nb">install</span>:
	@install programname /usr/local/bin/programname
clean:
	<span class="nb">rm</span> <span class="nt">-rf</span> <span class="k">*</span>.o</code></pre></figure>

<p>At first weird, but this Makefile boils down to: <code class="highlighter-rouge">c++ main.cpp -o programname</code>. The <code class="highlighter-rouge">install</code> and<code class="highlighter-rouge"> clean</code> parameters are optional for building the program.</p>

<hr />

<h2 id="a-slightly-less-basic-example">A slightly less basic example</h2>

<p>You can create several variables for the final product. In this example below, let‚Äôs say you want the parameters:</p>
<ul>
  <li><code class="highlighter-rouge">-g</code> (debug);</li>
  <li><code class="highlighter-rouge">-Wall</code> (so that the compiler reports warnings no matter how basic, but you want your program fully standardized with ISOCPP);</li>
  <li><code class="highlighter-rouge">-pthread</code> you will compile a graphical library and the linker needs this file separately;</li>
  <li><code class="highlighter-rouge">-export-dynamic</code> and finally this parameter, because in that case let‚Äôs say you are compiling with the <em>gtkmm</em> library.</li>
</ul>

<p>So in addition to the basic variables we saw in the basic example, the ending would look like this:</p>

<blockquote>
  <p>Note that this time <em>OBJS</em> tells the binaries, and if you only use the <code class="highlighter-rouge">make</code> command, it will not work, because the minimum <strong>TARGET</strong> for building the program is the<code class="highlighter-rouge"> all</code> parameter. The code files are inside a directory: <code class="highlighter-rouge">src/</code></p>
</blockquote>

<!-- RETANGULO LARGO 2 -->
<script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>

<p><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-2838251107855362" data-ad-slot="8549252987"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">TARGET</span><span class="o">=</span>hello-world
<span class="nv">CC</span><span class="o">=</span>g++
<span class="nv">DEBUG</span><span class="o">=</span><span class="nt">-g</span>
<span class="nv">OPT</span><span class="o">=</span><span class="nt">-O0</span>
<span class="nv">WARN</span><span class="o">=</span><span class="nt">-Wall</span>
<span class="nv">PTHREAD</span><span class="o">=</span><span class="nt">-pthread</span>
<span class="nv">CCFLAGS</span><span class="o">=</span><span class="si">$(</span>DEBUG<span class="si">)</span> <span class="si">$(</span>OPT<span class="si">)</span> <span class="si">$(</span>WARN<span class="si">)</span> <span class="si">$(</span>PTHREAD<span class="si">)</span> <span class="nt">-pipe</span>
<span class="nv">LD</span><span class="o">=</span>g++
<span class="nv">LDFLAGS</span><span class="o">=</span><span class="si">$(</span>PTHREAD<span class="si">)</span> <span class="nt">-export-dynamic</span>
<span class="nv">OBJS</span><span class="o">=</span> main.o helloworld.o
all: <span class="si">$(</span>OBJS<span class="si">)</span>
	<span class="si">$(</span>LD<span class="si">)</span> <span class="nt">-o</span> <span class="si">$(</span>TARGET<span class="si">)</span> <span class="si">$(</span>OBJS<span class="si">)</span> <span class="si">$(</span>LDFLAGS<span class="si">)</span>
 
main.o: src/main.cpp
	<span class="si">$(</span>CC<span class="si">)</span> <span class="nt">-c</span> <span class="si">$(</span>CCFLAGS<span class="si">)</span> src/main.cpp <span class="nt">-o</span> main.o
 
helloworld.o: src/helloworld.cpp
	<span class="si">$(</span>CC<span class="si">)</span> <span class="nt">-c</span> <span class="si">$(</span>CCFLAGS<span class="si">)</span> src/helloworld.cpp  <span class="nt">-o</span> helloworld.o
 
clean:
	<span class="nb">rm</span> <span class="nt">-f</span> <span class="k">*</span>.o</code></pre></figure>

<hr />

<!-- RETANGULO LARGO -->
<script async="" src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>

<!-- Informat -->
<p><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-2838251107855362" data-ad-slot="2327980059" data-ad-format="auto" data-full-width-responsive="true"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<h2 id="summing-up">Summing up</h2>
<p>I create and use Makefiles daily, even created a command in <a href="https://terminalroot.com.br/shell">Shell</a>, do also, which generates one for me passing only the files as a parameter. The truth is that there are no secrets, just respect these basic rules. You can even decide on variable names and remember to use TAB below the <strong>TARGETS</strong> where the commands will be.</p>

<p>If you haven‚Äôt already, I suggest you take a look at the simple examples suggested by the GNU guys, that‚Äôs where I learned: <a href="https://www.gnu.org/software/make/manual/html_node/Simple-Makefile.html">https://www.gnu.org/software/make/manual/html_node/Simple-Makefile.html</a> . The example files cited here can be found in the tutorial I made for <a href="https://gentoo.org">Gentoo</a> documentation  at this link: <a href="https://wiki.gentoo.org/wiki/Basic_guide_to_write_Gentoo_Ebuilds">https://wiki.gentoo.org/wiki/Basic_guide_to_write_Gentoo_Ebuilds</a>.</p>

<p>Hugs!</p>
:ET